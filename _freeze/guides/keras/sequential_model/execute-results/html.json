{
  "hash": "243945fa3479aa7316053245452314fa",
  "result": {
    "markdown": "---\ntitle: The Sequential model\nAuthor: \"[fchollet](https://twitter.com/fchollet), Tomasz Kalinowski\"\ndate-created: 2020/04/12\ndate-last-modified: 2020/04/12\ndescription: Complete guide to the Sequential model.\naliases:\n  - ../../articles/sequential_model.html\n  - ../../guide/keras/sequential_model/index.html\n---\n\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tensorflow)\nlibrary(keras)\n```\n:::\n\n\n## When to use a Sequential model\n\nA `Sequential` model is appropriate for **a plain stack of layers**\nwhere each layer has **exactly one input tensor and one output tensor**.\n\nSchematically, the following `Sequential` model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define Sequential model with 3 layers\nmodel <- keras_model_sequential() %>%\n  layer_dense(2, activation = \"relu\", name = \"layer1\") %>%\n  layer_dense(3, activation = \"relu\", name = \"layer2\") %>%\n  layer_dense(4, name = \"layer3\")\n\n# Call model on a test input\nx <- tf$ones(shape(3, 3))\ny <- model(x)\n```\n:::\n\n\nis equivalent to this function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create 3 layers\nlayer1 <- layer_dense(units = 2, activation = \"relu\", name = \"layer1\")\nlayer2 <- layer_dense(units = 3, activation = \"relu\", name = \"layer2\")\nlayer3 <- layer_dense(units = 4, name = \"layer3\")\n\n# Call layers on a test input\nx <- tf$ones(shape(3, 3))\ny <- layer3(layer2(layer1(x)))\n```\n:::\n\n\nA Sequential model is **not appropriate** when:\n\n-   Your model has multiple inputs or multiple outputs\n-   Any of your layers has multiple inputs or multiple outputs\n-   You need to do layer sharing\n-   You want non-linear topology (e.g. a residual connection, a\n    multi-branch model)\n\n## Creating a Sequential model\n\nYou can create a Sequential model by piping a model through a series\nlayers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- keras_model_sequential() %>%\n  layer_dense(2, activation = \"relu\") %>%\n  layer_dense(3, activation = \"relu\") %>%\n  layer_dense(4)\n```\n:::\n\n\nIts layers are accessible via the `layers` attribute:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel$layers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n<keras.layers.core.dense.Dense object at 0x7f65954d75b0>\n\n[[2]]\n<keras.layers.core.dense.Dense object at 0x7f65954d6ad0>\n\n[[3]]\n<keras.layers.core.dense.Dense object at 0x7f65954d6b60>\n```\n:::\n:::\n\n\nYou can also create a Sequential model incrementally:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- keras_model_sequential()\nmodel %>% layer_dense(2, activation = \"relu\")\nmodel %>% layer_dense(3, activation = \"relu\")\nmodel %>% layer_dense(4)\n```\n:::\n\n\nNote that there's also a corresponding `pop()` method to remove layers:\na Sequential model behaves very much like a stack of layers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel %>% pop_layer()\nlength(model$layers)  # 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nAlso note that the Sequential constructor accepts a `name` argument,\njust like any layer or model in Keras. This is useful to annotate\nTensorBoard graphs with semantically meaningful names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- keras_model_sequential(name = \"my_sequential\")\nmodel %>% layer_dense(2, activation = \"relu\", name = \"layer1\")\nmodel %>% layer_dense(3, activation = \"relu\", name = \"layer2\")\nmodel %>% layer_dense(4, name = \"layer3\")\n```\n:::\n\n\n## Specifying the input shape in advance\n\nGenerally, all layers in Keras need to know the shape of their inputs in\norder to be able to create their weights. So when you create a layer\nlike this, initially, it has no weights:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlayer <- layer_dense(units = 3)\nlayer$weights  # Empty\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nlist()\n```\n:::\n:::\n\n\nIt creates its weights the first time it is called on an input, since\nthe shape of the weights depends on the shape of the inputs:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Call layer on a test input\nx <- tf$ones(shape(1, 4))\ny <- layer(x)\nlayer$weights  # Now it has weights, of shape (4, 3) and (3,)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n<tf.Variable 'dense_6/kernel:0' shape=(4, 3) dtype=float32, numpy=\narray([[ 0.6829058 , -0.10781294, -0.44034854],\n       [ 0.2229135 , -0.08734196,  0.89350486],\n       [ 0.5833502 ,  0.83205104, -0.22722095],\n       [-0.5684    , -0.35749406, -0.3816334 ]], dtype=float32)>\n\n[[2]]\n<tf.Variable 'dense_6/bias:0' shape=(3,) dtype=float32, numpy=array([0., 0., 0.], dtype=float32)>\n```\n:::\n:::\n\n\nNaturally, this also applies to Sequential models. When you instantiate\na Sequential model without an input shape, it isn't \"built\": it has no\nweights (and calling `model$weights` results in an error stating just\nthis). The weights are created when the model first sees some input\ndata:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- keras_model_sequential() %>%\n        layer_dense(2, activation = \"relu\") %>%\n        layer_dense(3, activation = \"relu\") %>%\n        layer_dense(4)\n\n# No weights at this stage!\n# At this point, you can't do this:\n\ntry(model$weights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nError in py_get_attr_impl(x, name, silent) : \n  ValueError: Weights for model sequential_3 have not yet been created. Weights are created when the Model is first called on inputs or `build()` is called with an `input_shape`.\n```\n:::\n\n```{.r .cell-code}\n# The model summary is also not available:\nsummary(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel: <no summary available, model was not built>\n```\n:::\n\n```{.r .cell-code}\n# Call the model on a test input\nx <- tf$ones(shape(1, 4))\ny <- model(x)\ncat(\"Number of weights after calling the model:\", length(model$weights), \"\\n\")  # 6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of weights after calling the model: 6 \n```\n:::\n:::\n\n\nOnce a model is \"built\", you can call its `summary()` method to display\nits contents (the `summary()` method is also called by the default\n`print()` method:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel: \"sequential_3\"\n____________________________________________________________________________\n Layer (type)                     Output Shape                  Param #     \n============================================================================\n dense_9 (Dense)                  (1, 2)                        10          \n dense_8 (Dense)                  (1, 3)                        9           \n dense_7 (Dense)                  (1, 4)                        16          \n============================================================================\nTotal params: 35\nTrainable params: 35\nNon-trainable params: 0\n____________________________________________________________________________\n```\n:::\n:::\n\n\nHowever, it can be very useful when building a Sequential model\nincrementally to be able to display the summary of the model so far,\nincluding the current output shape. In this case, you should start your\nmodel by passing an `input_shape` argument to your model, so that it\nknows its input shape from the start:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- keras_model_sequential(input_shape = c(4))\nmodel %>% layer_dense(2, activation = \"relu\")\n\nmodel\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel: \"sequential_4\"\n____________________________________________________________________________\n Layer (type)                     Output Shape                  Param #     \n============================================================================\n dense_10 (Dense)                 (None, 2)                     10          \n============================================================================\nTotal params: 10\nTrainable params: 10\nNon-trainable params: 0\n____________________________________________________________________________\n```\n:::\n:::\n\n\nModels built with a predefined input shape like this always have weights\n(even before seeing any data) and always have a defined output shape.\n\nIn general, it's a recommended best practice to always specify the input\nshape of a Sequential model in advance if you know what it is.\n\n## A common debugging workflow: `%>%` + `summary()`\n\nWhen building a new Sequential architecture, it's useful to\nincrementally stack layers and print model summaries. For instance, this\nenables you to monitor how a stack of `Conv2D` and `MaxPooling2D` layers\nis downsampling image feature maps:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- keras_model_sequential(input_shape = c(250, 250, 3)) # 250x250 RGB images\n\nmodel %>%\n  layer_conv_2d(32, 5, strides = 2, activation = \"relu\") %>%\n  layer_conv_2d(32, 3, activation = \"relu\") %>%\n  layer_max_pooling_2d(3)\n\n# Can you guess what the current output shape is at this point? Probably not.\n# Let's just print it:\nmodel\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel: \"sequential_5\"\n____________________________________________________________________________\n Layer (type)                     Output Shape                  Param #     \n============================================================================\n conv2d_1 (Conv2D)                (None, 123, 123, 32)          2432        \n conv2d (Conv2D)                  (None, 121, 121, 32)          9248        \n max_pooling2d (MaxPooling2D)     (None, 40, 40, 32)            0           \n============================================================================\nTotal params: 11,680\nTrainable params: 11,680\nNon-trainable params: 0\n____________________________________________________________________________\n```\n:::\n\n```{.r .cell-code}\n# The answer was: (40, 40, 32), so we can keep downsampling...\nmodel %>%\n  layer_conv_2d(32, 3, activation = \"relu\") %>%\n  layer_conv_2d(32, 3, activation = \"relu\") %>%\n  layer_max_pooling_2d(3) %>%\n  layer_conv_2d(32, 3, activation = \"relu\") %>%\n  layer_conv_2d(32, 3, activation = \"relu\") %>%\n  layer_max_pooling_2d(2)\n\n# And now?\nmodel\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel: \"sequential_5\"\n____________________________________________________________________________\n Layer (type)                     Output Shape                  Param #     \n============================================================================\n conv2d_1 (Conv2D)                (None, 123, 123, 32)          2432        \n conv2d (Conv2D)                  (None, 121, 121, 32)          9248        \n max_pooling2d (MaxPooling2D)     (None, 40, 40, 32)            0           \n conv2d_5 (Conv2D)                (None, 38, 38, 32)            9248        \n conv2d_4 (Conv2D)                (None, 36, 36, 32)            9248        \n max_pooling2d_2 (MaxPooling2D)   (None, 12, 12, 32)            0           \n conv2d_3 (Conv2D)                (None, 10, 10, 32)            9248        \n conv2d_2 (Conv2D)                (None, 8, 8, 32)              9248        \n max_pooling2d_1 (MaxPooling2D)   (None, 4, 4, 32)              0           \n============================================================================\nTotal params: 48,672\nTrainable params: 48,672\nNon-trainable params: 0\n____________________________________________________________________________\n```\n:::\n\n```{.r .cell-code}\n# Now that we have 4x4 feature maps, time to apply global max pooling.\nmodel %>% layer_global_max_pooling_2d()\n\n# Finally, we add a classification layer.\nmodel %>% layer_dense(10)\n```\n:::\n\n\nVery practical, right?\n\n## What to do once you have a model\n\nOnce your model architecture is ready, you will want to:\n\n-   Train your model, evaluate it, and run inference. See our [guide to\n    training & evaluation with the built-in\n    loops](/guides/training_with_built_in_methods/)\n-   Save your model to disk and restore it. See our [guide to\n    serialization & saving](/guides/serialization_and_saving/).\n-   Speed up model training by leveraging multiple GPUs. See our [guide\n    to multi-GPU and distributed\n    training](https://keras.io/guides/distributed_training/).\n\n## Feature extraction with a Sequential model\n\nOnce a Sequential model has been built, it behaves like a [Functional\nAPI model](/guides/functional_api/). This means that every layer has an\n`input` and `output` attribute. These attributes can be used to do neat\nthings, like quickly creating a model that extracts the outputs of all\nintermediate layers in a Sequential model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninitial_model <-\n  keras_model_sequential(input_shape = c(250, 250, 3)) %>%\n  layer_conv_2d(32, 5, strides = 2, activation = \"relu\") %>%\n  layer_conv_2d(32, 3, activation = \"relu\") %>%\n  layer_conv_2d(32, 3, activation = \"relu\")\n\nfeature_extractor <- keras_model(\n  inputs = initial_model$inputs,\n  outputs = lapply(initial_model$layers, \\(layer) layer$output)\n)\n\n# Call feature extractor on test input.\n\nx <- tf$ones(shape(1, 250, 250, 3))\nfeatures <- feature_extractor(x)\n```\n:::\n\n\nHere's a similar example that only extract features from one layer:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninitial_model <-\n  keras_model_sequential(input_shape = c(250, 250, 3)) %>%\n  layer_conv_2d(32, 5, strides = 2, activation = \"relu\") %>%\n  layer_conv_2d(32, 3, activation = \"relu\", name = \"my_intermediate_layer\") %>%\n  layer_conv_2d(32, 3, activation = \"relu\")\n\nfeature_extractor <- keras_model(\n  inputs = initial_model$inputs,\n  outputs =  get_layer(initial_model, name = \"my_intermediate_layer\")$output\n)\n\n# Call feature extractor on test input.\nx <- tf$ones(shape(1, 250, 250, 3))\nfeatures <- feature_extractor(x)\n```\n:::\n\n\n## Transfer learning with a Sequential model\n\nTransfer learning consists of freezing the bottom layers in a model and\nonly training the top layers. If you aren't familiar with it, make sure\nto read our [guide to transfer learning](/guides/transfer_learning/).\n\nHere are two common transfer learning blueprint involving Sequential\nmodels.\n\nFirst, let's say that you have a Sequential model, and you want to\nfreeze all layers except the last one. In this case, you would simply\niterate over `model$layers` and set `layer$trainable = FALSE` on each\nlayer, except the last one. Like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- keras_model_sequential(input_shape = c(784)) %>%\n  layer_dense(32, activation = 'relu') %>%\n  layer_dense(32, activation = 'relu') %>%\n  layer_dense(32, activation = 'relu') %>%\n  layer_dense(10)\n\n\n# Presumably you would want to first load pre-trained weights.\nmodel$load_weights(...)\n\n# Freeze all layers except the last one.\nfor (layer in head(model$layers, -1))\n  layer$trainable <- FALSE\n\n# can also just call: freeze_weights(model, to = -2)\n\n# Recompile and train (this will only update the weights of the last layer).\nmodel %>% compile(...)\nmodel %>% fit(...)\n```\n:::\n\n\nAnother common blueprint is to use a Sequential model to stack a\npre-trained model and some freshly initialized classification layers.\nLike this:\n\n# Load a convolutional base with pre-trained weights\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_model <- application_xception(\n    weights = 'imagenet',\n    include_top = FALSE,\n    pooling = 'avg')\n\n# Freeze the base model\nbase_model$trainable <- FALSE\n\n# Use a Sequential model to add a trainable classifier on top\nmodel <- keras_model_sequential() %>%\n  base_model() %>%\n  layer_dense(1000)\n\n# Compile & train\nmodel %>% compile(...)\nmodel %>% fit(...)\n```\n:::\n\n\nIf you do transfer learning, you will probably find yourself frequently\nusing these two patterns.\n\nThat's about all you need to know about Sequential models!\n\nTo find out more about building models in Keras, see:\n\n-   [Guide to the Functional API](/guides/functional_api/)\n-   [Guide to making new Layers & Models via\n    subclassing](/guides/making_new_layers_and_models_via_subclassing/)\n\n\n---\nformat: html\n---\n\n## Environment Details\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### Tensorflow Version\n\n::: {.cell}\n\n```{.r .cell-code}\ntensorflow::tf_config()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTensorFlow v2.11.0 (~/.virtualenvs/r-tensorflow-website/lib/python3.10/site-packages/tensorflow)\nPython v3.10 (~/.virtualenvs/r-tensorflow-website/bin/python)\n```\n:::\n:::\n:::\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### R Environment Information\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.5 LTS\n\nMatrix products: default\nBLAS:   /home/tomasz/opt/R-4.2.1/lib/R/lib/libRblas.so\nLAPACK: /usr/lib/x86_64-linux-gnu/libmkl_intel_lp64.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] keras_2.9.0.9000      tensorflow_2.9.0.9000\n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.9           pillar_1.8.1         compiler_4.2.1      \n [4] base64enc_0.1-3      tools_4.2.1          zeallot_0.1.0       \n [7] digest_0.6.31        jsonlite_1.8.4       evaluate_0.18       \n[10] lifecycle_1.0.3      tibble_3.1.8         lattice_0.20-45     \n[13] pkgconfig_2.0.3      png_0.1-8            rlang_1.0.6         \n[16] Matrix_1.5-3         cli_3.4.1            yaml_2.3.6          \n[19] xfun_0.35            fastmap_1.1.0        stringr_1.5.0       \n[22] knitr_1.41           generics_0.1.3       vctrs_0.5.1         \n[25] htmlwidgets_1.5.4    rprojroot_2.0.3      grid_4.2.1          \n[28] reticulate_1.26-9000 glue_1.6.2           here_1.0.1          \n[31] R6_2.5.1             fansi_1.0.3          rmarkdown_2.18      \n[34] magrittr_2.0.3       whisker_0.4.1        htmltools_0.5.4     \n[37] tfruns_1.5.1         utf8_1.2.2           stringi_1.7.8       \n```\n:::\n:::\n:::\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### Python Environment Information\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem2(reticulate::py_exe(), c(\"-m pip freeze\"), stdout = TRUE) |> writeLines()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nabsl-py==1.3.0\nasttokens==2.2.1\nastunparse==1.6.3\nbackcall==0.2.0\ncachetools==5.2.0\ncertifi==2022.12.7\ncharset-normalizer==2.1.1\ndecorator==5.1.1\ndill==0.3.6\netils==0.9.0\nexecuting==1.2.0\nflatbuffers==22.12.6\ngast==0.4.0\ngoogle-auth==2.15.0\ngoogle-auth-oauthlib==0.4.6\ngoogle-pasta==0.2.0\ngoogleapis-common-protos==1.57.0\ngrpcio==1.51.1\nh5py==3.7.0\nidna==3.4\nimportlib-resources==5.10.1\nipython==8.7.0\njedi==0.18.2\nkaggle==1.5.12\nkeras==2.11.0\nkeras-tuner==1.1.3\nkt-legacy==1.0.4\nlibclang==14.0.6\nMarkdown==3.4.1\nMarkupSafe==2.1.1\nmatplotlib-inline==0.1.6\nnumpy==1.23.5\noauthlib==3.2.2\nopt-einsum==3.3.0\npackaging==22.0\npandas==1.5.2\nparso==0.8.3\npexpect==4.8.0\npickleshare==0.7.5\nPillow==9.3.0\npromise==2.3\nprompt-toolkit==3.0.36\nprotobuf==3.19.6\nptyprocess==0.7.0\npure-eval==0.2.2\npyasn1==0.4.8\npyasn1-modules==0.2.8\npydot==1.4.2\nPygments==2.13.0\npyparsing==3.0.9\npython-dateutil==2.8.2\npython-slugify==7.0.0\npytz==2022.6\nPyYAML==6.0\nrequests==2.28.1\nrequests-oauthlib==1.3.1\nrsa==4.9\nscipy==1.9.3\nsix==1.16.0\nstack-data==0.6.2\ntensorboard==2.11.0\ntensorboard-data-server==0.6.1\ntensorboard-plugin-wit==1.8.1\ntensorflow==2.11.0\ntensorflow-datasets==4.7.0\ntensorflow-estimator==2.11.0\ntensorflow-hub==0.12.0\ntensorflow-io-gcs-filesystem==0.28.0\ntensorflow-metadata==1.12.0\ntermcolor==2.1.1\ntext-unidecode==1.3\ntoml==0.10.2\ntqdm==4.64.1\ntraitlets==5.7.1\ntyping_extensions==4.4.0\nurllib3==1.26.13\nwcwidth==0.2.5\nWerkzeug==2.2.2\nwrapt==1.14.1\nzipp==3.11.0\n```\n:::\n:::\n:::\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### Additional Information\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nTF Devices:\n-  PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU') \n-  PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU') \nCPU cores: 12 \nDate rendered: 2022-12-16 \nPage render time: 6 seconds\n```\n:::\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}