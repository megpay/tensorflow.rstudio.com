{
  "hash": "615908eecff6064a761a5708ac31b807",
  "result": {
    "markdown": "---\ntitle: Understanding masking & padding\nauthor: Scott Zhu, Francois Chollet\ndate-created: 2019/07/16\ndate-last-modified: 2020/04/14\ndescription: Complete guide to using mask-aware sequence layers in Keras.\n---\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tensorflow)\nlibrary(keras)\n```\n:::\n\n\n## Introduction\n\n\n**Masking** is a way to tell sequence-processing layers that certain timesteps\nin an input are missing, and thus should be skipped when processing the data.\n\n**Padding** is a special form of masking where the masked steps are at the start or\nthe end of a sequence. Padding comes from the need to encode sequence data into\ncontiguous batches: in order to make all sequences in a batch fit a given standard\nlength, it is necessary to pad or truncate some sequences.\n\nLet's take a close look.\n\n\n## Padding sequence data\n\n\nWhen processing sequence data, it is very common for individual samples to have\ndifferent lengths. Consider the following example (text tokenized as words):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(\n  c(\"Hello\", \"world\", \"!\"),\n  c(\"How\", \"are\", \"you\", \"doing\", \"today\"),\n  c(\"The\", \"weather\", \"will\", \"be\", \"nice\", \"tomorrow\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"Hello\" \"world\" \"!\"    \n\n[[2]]\n[1] \"How\"   \"are\"   \"you\"   \"doing\" \"today\"\n\n[[3]]\n[1] \"The\"      \"weather\"  \"will\"     \"be\"       \"nice\"     \"tomorrow\"\n```\n:::\n:::\n\n\nAfter vocabulary lookup, the data might be vectorized as integers, e.g.:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(\n  c(71, 1331, 4231),\n  c(73, 8, 3215, 55, 927),\n  c(83, 91, 1, 645, 1253, 927)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1]   71 1331 4231\n\n[[2]]\n[1]   73    8 3215   55  927\n\n[[3]]\n[1]   83   91    1  645 1253  927\n```\n:::\n:::\n\n\nThe data is a nested list where individual samples have length 3, 5, and 6,\nrespectively. Since the input data for a deep learning model must be a single tensor\n(of shape e.g. `(batch_size, 6, vocab_size)` in this case), samples that are shorter\nthan the longest item need to be padded with some placeholder value (alternatively,\none might also truncate long samples before padding short samples).\n\nKeras provides a utility function to truncate and pad lists to a common length:\n`pad_sequences()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw_inputs <- list(\n  c(711, 632, 71),\n  c(73, 8, 3215, 55, 927),\n  c(83, 91, 1, 645, 1253, 927)\n)\n\n# By default, this will pad using 0s; it is configurable via the\n# \"value\" parameter.\n# Note that you could use \"pre\" padding (at the beginning) or\n# \"post\" padding (at the end).\n# We recommend using \"post\" padding when working with RNN layers\n# (in order to be able to use the\n# CuDNN implementation of the layers).\n\npadded_inputs <- pad_sequences(raw_inputs, padding = \"post\")\nprint(padded_inputs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]  711  632   71    0    0    0\n[2,]   73    8 3215   55  927    0\n[3,]   83   91    1  645 1253  927\n```\n:::\n:::\n\n\n## Masking\n\nNow that all samples have a uniform length, the model must be informed that some part\nof the data is actually padding and should be ignored. That mechanism is **masking**.\n\nThere are three ways to introduce input masks in Keras models:\n\n- Add a `layer_masking()` layer.\n- Configure a `layer_embedding()` layer with `mask_zero = TRUE`.\n- Pass a `mask` argument manually when calling layers that support this argument (e.g.\nRNN layers).\n\n## Mask-generating layers: `embedding` and `masking`\n\nUnder the hood, these layers will create a mask tensor (2D tensor with shape `(batch, sequence_length)`), and attach it to the tensor output returned by the `layer_masking()` or `layer_embedding()` layer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nembedding <- layer_embedding(input_dim = 5000, output_dim = 16, mask_zero = TRUE)\nmasked_output <- embedding(padded_inputs)\n\nprint(masked_output$`_keras_mask`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntf.Tensor(\n[[ True  True  True False False False]\n [ True  True  True  True  True False]\n [ True  True  True  True  True  True]], shape=(3, 6), dtype=bool)\n```\n:::\n\n```{.r .cell-code}\nmasking_layer <- layer_masking()\n# Simulate the embedding lookup by expanding the 2D input to 3D,\n# with embedding dimension of 10.\nunmasked_embedding <- tf$cast(\n    tf$tile(tf$expand_dims(padded_inputs, axis = -1L), c(1L, 1L, 10L)), tf$float32\n)\nmasked_embedding <- masking_layer(unmasked_embedding)\nprint(masked_embedding$`_keras_mask`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntf.Tensor(\n[[ True  True  True False False False]\n [ True  True  True  True  True False]\n [ True  True  True  True  True  True]], shape=(3, 6), dtype=bool)\n```\n:::\n:::\n\n\nAs you can see from the printed result, the mask is a 2D boolean tensor with shape\n`(batch_size, sequence_length)`, where each individual `FALSE` entry indicates that\nthe corresponding timestep should be ignored during processing.\n\n## Mask propagation in the Functional API and Sequential API\n\nWhen using the Functional API or the Sequential API, a mask generated by an `layer_embedding()` or `layer_masking()` will be propagated through the network for any layer that is capable of using them (for example, RNN layers). Keras will automatically fetch the mask corresponding to an input and pass it to any layer that knows how to use it.\n\nFor instance, in the following Sequential model, the `LSTM` layer will automatically\nreceive a mask, which means it will ignore padded values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- keras_model_sequential() %>% \n  layer_embedding(input_dim = 5000, output_dim = 16, mask_zero = TRUE) %>% \n  layer_lstm(32)\n```\n:::\n\n\nThis is also the case for the following Functional API model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninputs <- layer_input(shape = shape(NULL), dtype = \"int32\")\noutputs <- inputs %>% \n  layer_embedding(input_dim = 5000, output_dim = 16, mask_zero = TRUE) %>% \n  layer_lstm(units = 32)\nmodel <- keras_model(inputs, outputs)\n```\n:::\n\n\n## Passing mask tensors directly to layers\n\nLayers that can handle masks (such as the `LSTM` layer) have a `mask` argument in their `call` method.\n\nMeanwhile, layers that produce a mask (e.g. `Embedding`) expose a `compute_mask(input, previous_mask)` method which you can call.\n\nThus, you can pass the output of the `compute_mask()` method of a mask-producing layer to the `call` method of a mask-consuming layer, like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_layer <- new_layer_class(\n  \"my_layer\",\n  initialize = function(...) {\n    super()$`__init__`(...)\n    self$embedding <- layer_embedding(\n      input_dim = 5000, \n      output_dim = 16, \n      mask_zero = TRUE\n    )\n    self$lstm <- layer_lstm(units = 32)\n  },\n  call = function(inputs) {\n    x <- self$embedding(inputs)\n    # Note that you could also prepare a `mask` tensor manually.\n    # It only needs to be a boolean tensor\n    # with the right shape, i$e. (batch_size, timesteps).\n    mask <- self$embedding$compute_mask(inputs)\n    output <- self$lstm(x, mask = mask)  # The layer will ignore the masked values\n    output\n  }\n)\n\n\nlayer <- my_layer()\nx <- array(as.integer(runif(32*10)*100), dim = c(32, 10))\nlayer(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntf.Tensor(\n[[ 0.00661029  0.00905568  0.00409111 ... -0.00269595 -0.00302358\n   0.00087318]\n [-0.00190009  0.00422419 -0.00334891 ... -0.00201224  0.00238065\n   0.0036881 ]\n [-0.00398618  0.00931766  0.00278585 ... -0.00403854  0.00363951\n  -0.00540061]\n ...\n [-0.00302773 -0.00809171  0.00139773 ... -0.00075406  0.00909089\n  -0.00136076]\n [ 0.00469031 -0.00315592 -0.00237436 ...  0.00177373  0.00785404\n  -0.00016403]\n [-0.00911869 -0.00276186  0.00483396 ... -0.00481566  0.00428451\n  -0.00243689]], shape=(32, 32), dtype=float32)\n```\n:::\n:::\n\n\n## Supporting masking in your custom layers\n\nSometimes, you may need to write layers that generate a mask (like `Embedding`), or layers that need to modify the current mask.\n\nFor instance, any layer that produces a tensor with a different time dimension than its input, such as a `Concatenate` layer that concatenates on the time dimension, will need to modify the current mask so that downstream layers will be able to properly\ntake masked timesteps into account.\n\nTo do this, your layer should implement the `layer$compute_mask()` method, which produces a new mask given the input and the current mask.\n\nHere is an example of a `temporal_split` layer that needs to modify the current mask.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlayer_temporal_split <- new_layer_class(\n  \"temporal_split\",\n  call = function(inputs) {\n    # Expect the input to be 3D and mask to be 2D, split the input tensor into 2\n    # subtensors along the time axis (axis 1).\n    tf$split(inputs, 2L, axis = 1L)\n  },\n  compute_mask = function(inputs, mask = NULL) {\n    # Also split the mask into 2 if it presents.\n    if (is.null(mask)) return(NULL)\n    tf$split(mask, 2L, axis = 1L)\n  }\n)\n\nc(first_half, second_half) %<-% layer_temporal_split()(masked_embedding)\nprint(first_half$`_keras_mask`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntf.Tensor(\n[[ True  True  True]\n [ True  True  True]\n [ True  True  True]], shape=(3, 3), dtype=bool)\n```\n:::\n\n```{.r .cell-code}\nprint(second_half$`_keras_mask`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntf.Tensor(\n[[False False False]\n [ True  True False]\n [ True  True  True]], shape=(3, 3), dtype=bool)\n```\n:::\n:::\n\n\nHere is another example of a `custom_embedding` layer that is capable of generating a\nmask from input values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlayer_custom_embedding <- new_layer_class(\n  \"custom_embedding\",\n  initialize = function(input_dim, output_dim, mask_zero = FALSE, ...) {\n    super()$ `__init__`(...)\n    self$input_dim <- input_dim\n    self$output_dim <- output_dim\n    self$mask_zero <- mask_zero  \n  },\n  build = function(input_shape) {\n    self$embeddings <- self$add_weight(\n      shape = shape(self$input_dim, self$output_dim),\n      initializer = \"random_normal\",\n      dtype = \"float32\"\n    )\n  },\n  call = function(inputs) {\n    tf$nn$embedding_lookup(self$embeddings, inputs)\n  },\n  compute_mask = function(inputs, mask = NULL) {\n    if (!self$mask_zero) return(NULL)\n    tf$not_equal(inputs, 0L)\n  }\n)\n\nlayer <- layer_custom_embedding(\n  input_dim = 10, \n  output_dim = 32, \n  mask_zero = TRUE\n)\n\nx <- array(as.integer(runif(3*10)*9), dim = c(3, 10))\ny <- layer(x)\nmask <- layer$compute_mask(x)\n\nprint(mask)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntf.Tensor(\n[[ True  True False  True False False  True  True  True  True]\n [ True  True  True False  True False  True  True  True  True]\n [ True  True  True  True  True  True False  True  True  True]], shape=(3, 10), dtype=bool)\n```\n:::\n:::\n\n\nNote: For more details about format limitations related to masking, see the \n[serialization guide](/guides/serialization_and_saving).\n\n## Opting-in to mask propagation on compatible layers\n\nMost layers don't modify the time dimension, so don't need to modify the current mask.\nHowever, they may still want to be able to **propagate** the current mask, unchanged,\nto the next layer. **This is an opt-in behavior.** By default, a custom layer will\ndestroy the current mask (since the framework has no way to tell whether propagating\nthe mask is safe to do).\n\nIf you have a custom layer that does not modify the time dimension, and if you want it to be able to propagate the current input mask, you should set `self$supports_masking = TRUE` in the layer constructor. In this case, the default behavior of `compute_mask()` is to just pass the current mask through.\n\nHere's an example of a layer that is whitelisted for mask propagation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlayer_my_activation <- new_layer_class(\n  \"my_activation\",\n  initialize = function(...) {\n    super()$`__init__`(...)\n    self$supports_masking <- TRUE\n  },\n  call = function(inputs) {\n    tf$nn$relu(inputs)\n  }\n)\n```\n:::\n\n\nYou can now use this custom layer in-between a mask-generating layer (like `Embedding`)\nand a mask-consuming layer (like `LSTM`), and it will pass the mask along so that it\nreaches the mask-consuming layer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninputs <- layer_input(shape = shape(NULL), dtype = \"int32\")\nx <- inputs %>% \n  layer_embedding(input_dim = 5000, output_dim = 16, mask_zero = TRUE) %>% \n  layer_my_activation() # Will pass the mask along\nprint(x$`_keras_mask`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nKerasTensor(type_spec=TensorSpec(shape=(None, None), dtype=tf.bool, name=None), name='Placeholder_1:0')\n```\n:::\n\n```{.r .cell-code}\noutputs <- layer_lstm(x, 32)# Will receive the mask\nmodel <- keras_model(inputs, outputs)\n```\n:::\n\n\n## Writing layers that need mask information\n\n\nSome layers are mask *consumers*: they accept a `mask` argument in `call` and use it to determine whether to skip certain time steps.\n\nTo write such a layer, you can simply add a `mask = NULL` argument in your `call`\nsignature. The mask associated with the inputs will be passed to your layer whenever\nit is available.\n\nHere's a simple example below: a layer that computes a softmax over the time dimension (axis 1) of an input sequence, while discarding masked timesteps.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlayer_temporal_softmax <- new_layer_class(\n  \"temporal_softmax\",\n  call = function(inputs, mask = NULL) {\n   broadcast_float_mask <- tf$expand_dims(tf$cast(mask, \"float32\"), -1L)\n   inputs_exp <- tf$exp(inputs) * broadcast_float_mask\n   inputs_sum <- tf$reduce_sum(\n     inputs_exp * broadcast_float_mask, \n     axis = -1L, \n     keepdims = TRUE\n   )\n   inputs_exp / inputs_sum \n  }\n)\n\ninputs <- layer_input(shape = shape(NULL), dtype = \"int32\")\noutputs <- inputs %>% \n  layer_embedding(input_dim = 10, output_dim = 32, mask_zero = TRUE) %>% \n  layer_dense(1) %>% \n  layer_temporal_softmax()\n\nmodel <- keras_model(inputs, outputs)\ny <- model(\n  array(sample.int(9, 32*100, replace = TRUE), dim = c(32, 100)),\n  array(runif(32*100), dim = c(32, 100, 1))\n)\n```\n:::\n\n\n## Summary\n\nThat is all you need to know about padding & masking in Keras. To recap:\n\n- \"Masking\" is how layers are able to know when to skip / ignore certain timesteps in\nsequence inputs.\n- Some layers are mask-generators: `Embedding` can generate a mask from input values\n(if `mask_zero = TRUE`), and so can the `Masking` layer.\n- Some layers are mask-consumers: they expose a `mask` argument in their `__call__`\nmethod. This is the case for RNN layers.\n- In the Functional API and Sequential API, mask information is propagated\nautomatically.\n- When using layers in a standalone way, you can pass the `mask` arguments to layers\nmanually.\n- You can easily write layers that modify the current mask, that generate a new mask,\nor that consume the mask associated with the inputs.\n\n---\nformat: html\n---\n\n## Environment Details\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### Tensorflow Version\n\n::: {.cell}\n\n```{.r .cell-code}\ntensorflow::tf_config()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTensorFlow v2.11.0 (~/.virtualenvs/r-tensorflow-website/lib/python3.10/site-packages/tensorflow)\nPython v3.10 (~/.virtualenvs/r-tensorflow-website/bin/python)\n```\n:::\n:::\n:::\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### R Environment Information\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.5 LTS\n\nMatrix products: default\nBLAS:   /home/tomasz/opt/R-4.2.1/lib/R/lib/libRblas.so\nLAPACK: /usr/lib/x86_64-linux-gnu/libmkl_intel_lp64.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] keras_2.9.0.9000      tensorflow_2.9.0.9000\n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.9           pillar_1.8.1         compiler_4.2.1      \n [4] base64enc_0.1-3      tools_4.2.1          zeallot_0.1.0       \n [7] digest_0.6.31        jsonlite_1.8.4       evaluate_0.18       \n[10] lifecycle_1.0.3      tibble_3.1.8         lattice_0.20-45     \n[13] pkgconfig_2.0.3      png_0.1-8            rlang_1.0.6         \n[16] Matrix_1.5-3         cli_3.4.1            yaml_2.3.6          \n[19] xfun_0.35            fastmap_1.1.0        stringr_1.5.0       \n[22] knitr_1.41           generics_0.1.3       vctrs_0.5.1         \n[25] htmlwidgets_1.5.4    rprojroot_2.0.3      grid_4.2.1          \n[28] reticulate_1.26-9000 glue_1.6.2           here_1.0.1          \n[31] R6_2.5.1             fansi_1.0.3          rmarkdown_2.18      \n[34] magrittr_2.0.3       whisker_0.4.1        htmltools_0.5.4     \n[37] tfruns_1.5.1         utf8_1.2.2           stringi_1.7.8       \n```\n:::\n:::\n:::\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### Python Environment Information\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem2(reticulate::py_exe(), c(\"-m pip freeze\"), stdout = TRUE) |> writeLines()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nabsl-py==1.3.0\nasttokens==2.2.1\nastunparse==1.6.3\nbackcall==0.2.0\ncachetools==5.2.0\ncertifi==2022.12.7\ncharset-normalizer==2.1.1\ndecorator==5.1.1\ndill==0.3.6\netils==0.9.0\nexecuting==1.2.0\nflatbuffers==22.12.6\ngast==0.4.0\ngoogle-auth==2.15.0\ngoogle-auth-oauthlib==0.4.6\ngoogle-pasta==0.2.0\ngoogleapis-common-protos==1.57.0\ngrpcio==1.51.1\nh5py==3.7.0\nidna==3.4\nimportlib-resources==5.10.1\nipython==8.7.0\njedi==0.18.2\nkaggle==1.5.12\nkeras==2.11.0\nkeras-tuner==1.1.3\nkt-legacy==1.0.4\nlibclang==14.0.6\nMarkdown==3.4.1\nMarkupSafe==2.1.1\nmatplotlib-inline==0.1.6\nnumpy==1.23.5\noauthlib==3.2.2\nopt-einsum==3.3.0\npackaging==22.0\npandas==1.5.2\nparso==0.8.3\npexpect==4.8.0\npickleshare==0.7.5\nPillow==9.3.0\npromise==2.3\nprompt-toolkit==3.0.36\nprotobuf==3.19.6\nptyprocess==0.7.0\npure-eval==0.2.2\npyasn1==0.4.8\npyasn1-modules==0.2.8\npydot==1.4.2\nPygments==2.13.0\npyparsing==3.0.9\npython-dateutil==2.8.2\npython-slugify==7.0.0\npytz==2022.6\nPyYAML==6.0\nrequests==2.28.1\nrequests-oauthlib==1.3.1\nrsa==4.9\nscipy==1.9.3\nsix==1.16.0\nstack-data==0.6.2\ntensorboard==2.11.0\ntensorboard-data-server==0.6.1\ntensorboard-plugin-wit==1.8.1\ntensorflow==2.11.0\ntensorflow-datasets==4.7.0\ntensorflow-estimator==2.11.0\ntensorflow-hub==0.12.0\ntensorflow-io-gcs-filesystem==0.28.0\ntensorflow-metadata==1.12.0\ntermcolor==2.1.1\ntext-unidecode==1.3\ntoml==0.10.2\ntqdm==4.64.1\ntraitlets==5.7.1\ntyping_extensions==4.4.0\nurllib3==1.26.13\nwcwidth==0.2.5\nWerkzeug==2.2.2\nwrapt==1.14.1\nzipp==3.11.0\n```\n:::\n:::\n:::\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### Additional Information\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nTF Devices:\n-  PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU') \n-  PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU') \nCPU cores: 12 \nDate rendered: 2022-12-16 \nPage render time: 7 seconds\n```\n:::\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}