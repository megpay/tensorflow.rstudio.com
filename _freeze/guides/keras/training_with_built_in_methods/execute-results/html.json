{
  "hash": "e5228266ce0168330c5f7e3d6e0c2528",
  "result": {
    "markdown": "---\ntitle: Training & evaluation with the built-in methods\nauthor: '[fchollet](https://twitter.com/fchollet)'\n'date-created': '2019/03/01'\n'date-last-modified': '2020/04/13'\ndescription: Complete guide to training & evaluation with `fit()` and `evaluate()`.\n---\n\n\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tensorflow)\nlibrary(keras)\n```\n:::\n\n\n## Introduction\n\nThis guide covers training, evaluation, and prediction (inference) models\nwhen using built-in APIs for training & validation.\n\nIf you are interested in leveraging `fit()` while specifying your\nown training step function, see the\n[Customizing what happens in `fit()` guide](/guides/customizing_what_happens_in_fit/).\n\nIf you are interested in writing your own training & evaluation loops from\nscratch, see the guide\n[\"writing a training loop from scratch\"](/guides/writing_a_training_loop_from_scratch/).\n\nIn general, whether you are using built-in loops or writing your own, model training &\nevaluation works strictly in the same way across every kind of Keras model --\nSequential models, models built with the Functional API, and models written from\nscratch via model subclassing.\n\nThis guide doesn't cover distributed training, which is covered in our\n[guide to multi-GPU & distributed training](https://keras$io/guides/distributed_training/).\n\n\n## API overview: a first end-to-end example\n\nWhen passing data to the built-in training loops of a model, you should either use\n**NumPy arrays** (if your data is small and fits in memory) or **`tf$data Dataset`\nobjects**. In the next few paragraphs, we'll use the MNIST dataset as NumPy arrays, in\norder to demonstrate how to use optimizers, losses, and metrics.\n\nLet's consider the following model (here, we build in with the Functional API, but it\ncould be a Sequential model or a subclassed model as well):\n\n::: {.cell}\n\n```{.r .cell-code}\ninputs <- layer_input(shape = shape(784), name = \"digits\")\nx <- inputs %>% \n  layer_dense(units = 64, activation = \"relu\", name = \"dense_1\") %>% \n  layer_dense(units = 64, activation = \"relu\", name = \"dense_2\")\noutputs <- x %>% \n  layer_dense(units = 10, activation = \"softmax\", name = \"predictions\")\nmodel <- keras_model(inputs = inputs, outputs = outputs)\n```\n:::\n\n\nHere's what the typical end-to-end workflow looks like, consisting of:\n\n- Training\n- Validation on a holdout set generated from the original training data\n- Evaluation on the test data\n\nWe'll use MNIST data for this example.\n\n::: {.cell}\n\n```{.r .cell-code}\nc(c(x_train, y_train), c(x_test, y_test)) %<-% dataset_mnist()\n\nx_train <- array_reshape(x_train, c(nrow(x_train), 784))\nx_test <- array_reshape(x_test, c(nrow(x_test), 784))\n\n# Transform RGB values into [0,1] range\nx_train <- x_train / 255\nx_test <- x_test / 255\n\n# Reserve 10,000 samples for validation\nx_val <- tail(x_train, 10000)\ny_val <- tail(y_train, 10000)\nx_train <- head(x_train, 50000)\ny_train <- head(y_train, 50000)\n```\n:::\n\n\nWe specify the training configuration (optimizer, loss, metrics):\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel %>% compile(\n    optimizer = optimizer_rmsprop(),  # Optimizer\n    # Loss function to minimize\n    loss = loss_sparse_categorical_crossentropy(),\n    # List of metrics to monitor\n    metrics = list(metric_sparse_categorical_accuracy()),\n)\n```\n:::\n\n\nWe call `fit()`, which will train the model by slicing the data into \"batches\" of size\n`batch_size`, and repeatedly iterating over the entire dataset for a given number of\n`epochs`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhistory <- model %>% fit(\n    x_train,\n    y_train,\n    batch_size = 64,\n    epochs = 2,\n    # We pass some validation for\n    # monitoring validation loss and metrics\n    # at the end of each epoch\n    validation_data = list(x_val, y_val),\n)\n```\n:::\n\n\nThe returned `history` object holds a record of the loss values and metric values\nduring training:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhistory\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nFinal epoch (plot to see history):\n                           loss: 0.1664\n    sparse_categorical_accuracy: 0.95\n                       val_loss: 0.1427\nval_sparse_categorical_accuracy: 0.9595 \n```\n:::\n:::\n\n\nWe evaluate the model on the test data via `evaluate()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Evaluate the model on the test data using `evaluate`\nresults <- model %>% evaluate(x_test, y_test, batch_size = 128)\ncat(\"test loss, test acc:\", results)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntest loss, test acc: 0.1450924 0.9584\n```\n:::\n\n```{.r .cell-code}\n# Generate predictions (probabilities -- the output of the last layer)\n\n# on new data using `predict`\n\npredictions <- predict(model, x_test[1:3,])\ndim(predictions)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  3 10\n```\n:::\n:::\n\n\nNow, let's review each piece of this workflow in detail.\n\n\n## The `compile()` method: specifying a loss, metrics, and an optimizer\n\nTo train a model with `fit()`, you need to specify a loss function, an optimizer, and\noptionally, some metrics to monitor.\n\nYou pass these to the model as arguments to the `compile()` method:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel %>% compile(\n    optimizer = optimizer_rmsprop(learning_rate = 1e-3),\n    loss = loss_categorical_crossentropy(),\n    metrics = list(metric_sparse_categorical_accuracy())\n)\n```\n:::\n\n\nThe `metrics` argument should be a list -- your model can have any number of metrics.\n\nIf your model has multiple outputs, you can specify different losses and metrics for\neach output, and you can modulate the contribution of each output to the total loss of\nthe model. You will find more details about this in the **Passing data to multi-input,\nmulti-output models** section.\n\nNote that if you're satisfied with the default settings, in many cases the optimizer,\nloss, and metrics can be specified via string identifiers as a shortcut:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel %>% compile(\n    optimizer = \"rmsprop\",\n    loss = \"sparse_categorical_crossentropy\",\n    metrics = list(\"sparse_categorical_accuracy\")\n)\n```\n:::\n\n\nFor later reuse, let's put our model definition and compile step in functions; we will\ncall them several times across different examples in this guide.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_uncompiled_model <- function() {\n  inputs <- layer_input(shape = shape(784), name = \"digits\")\n  x <- inputs %>% \n    layer_dense(units = 64, activation = \"relu\", name = \"dense_1\") %>% \n    layer_dense(units = 64, activation = \"relu\", name = \"dense_2\")\n  outputs <- x %>% \n    layer_dense(units = 10, activation = \"softmax\", name = \"predictions\")\n  model <- keras_model(inputs = inputs, outputs = outputs)\n  model\n}\n\nget_compiled_model <- function() {\n  model <- get_uncompiled_model()\n  model %>% compile(\n    optimizer = \"rmsprop\",\n    loss = \"sparse_categorical_crossentropy\",\n    metrics = list(\"sparse_categorical_accuracy\"),\n  )\n  model\n}\n```\n:::\n\n\n### Many built-in optimizers, losses, and metrics are available\n\n\nIn general, you won't have to create your own losses, metrics, or optimizers\nfrom scratch, because what you need is likely to be already part of the Keras API:\n\nOptimizers:\n\n- `optimizer_sgd()` (with or without momentum)\n- `optimizer_rmsprop()`\n- `optimizer_adam()`\n- etc.\n\nLosses:\n\n- `loss_mean_squared_error()`\n- `loss_kl_divergence()`\n- `loss_cosine_similarity()`\n- etc.\n\nMetrics:\n\n- `metric_auc()`\n- `metric_precision()`\n- `metric_recall()`\n- etc.\n\n\n### Custom losses\n\n\nIf you need to create a custom loss, Keras provides two ways to do so.\n\nThe first method involves creating a function that accepts inputs `y_true` and\n`y_pred`. The following example shows a loss function that computes the mean squared\nerror between the real data and the predictions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom_mean_squared_error <- function(y_true, y_pred) {\n  tf$math$reduce_mean(tf$square(y_true - y_pred))\n}\n\n\nmodel <- get_uncompiled_model()\nmodel %>% compile(optimizer = optimizer_adam(), loss = custom_mean_squared_error)\n\n# We need to one-hot encode the labels to use MSE\n\ny_train_one_hot <- tf$one_hot(y_train, depth = 10L)\nmodel %>% fit(x_train, y_train_one_hot, batch_size = 64, epochs = 1)\n```\n:::\n\n\nIf you need a loss function that takes in parameters beside `y_true` and `y_pred`, you\ncan subclass the `tf$keras$losses$Loss` class and implement the following two methods:\n\n- `initialize()`: accept parameters to pass during the call of your loss function\n- `call(y_true, y_pred)`: use the targets (y_true) and the model predictions\n(y_pred) to compute the model's loss\n\nLet's say you want to use mean squared error, but with an added term that\nwill de-incentivize  prediction values far from 0.5 (we assume that the categorical\ntargets are one-hot encoded and take values between 0 and 1). This\ncreates an incentive for the model not to be too confident, which may help\nreduce overfitting (we won't know if it works until we try!).\n\nHere's how you would do it:\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom_mse <- new_loss_class(\n  classname = \"custom_mse\",\n  initialize = function(regularization_factor = 0.1, name = \"custom_mse\") {\n    super()$`__init__`(name = name)\n    self$regularization_factor <- regularization_factor\n  },\n  call = function(y_true, y_pred) {\n    mse <- tf$math$reduce_mean(tf$square(y_true - y_pred))\n    reg <- tf$math$reduce_mean(tf$square(0.5 - y_pred))\n    mse + reg * self$regularization_factor\n  }\n)\n\nmodel <- get_uncompiled_model()\nmodel %>% compile(optimizer = optimizer_adam(), loss = custom_mse())\n\ny_train_one_hot <- tf$one_hot(y_train, depth = 10L)\nmodel %>% fit(x_train, y_train_one_hot, batch_size = 64, epochs = 1)\n```\n:::\n\n\n### Custom metrics\n\n\nIf you need a metric that isn't part of the API, you can easily create custom metrics\nby subclassing the `tf$keras$metrics$Metric` class. You will need to implement 4\nmethods:\n\n- `initialize()`, in which you will create state variables for your metric.\n- `update_state(y_true, y_pred, sample_weight = NULL)`, which uses the targets\ny_true and the model predictions y_pred to update the state variables.\n- `result()`, which uses the state variables to compute the final results.\n- `reset_state()`, which reinitializes the state of the metric.\n\nState update and results computation are kept separate (in `update_state()` and\n`result()`, respectively) because in some cases, the results computation might be very\nexpensive and would only be done periodically.\n\nHere's a simple example showing how to implement a `CategoricalTRUEPositives` metric\nthat counts how many samples were correctly classified as belonging to a given class:\n\n::: {.cell}\n\n```{.r .cell-code}\ncategorical_true_positives <- new_metric_class(\n  classname = \"categorical_true_positives\",\n  initialize = function(name = \"categorical_true_positives\", ...) {\n    super()$`__init__`(name, ...)\n    self$true_positives <- self$add_weight(name = \"ctp\", initializer = \"zeros\")\n  },\n  update_state = function(y_true, y_pred, sample_weight = NULL) {\n    y_pred <- tf$reshape(tf$argmax(y_pred, axis = 1L), shape = c(-1L,1L))\n    values <- tf$cast(y_true, \"int32\") == tf$cast(y_pred, \"int32\")\n    values <- tf$cast(values, \"float32\")\n    if (!is.null(sample_weight)) {\n      sample_weight <- tf$cast(sample_weight, \"float32\")\n      values <- tf$multiply(values, sample_weight)\n    }\n\n    self$true_positives$assign_add(tf$reduce_sum(values))\n  },\n  result = function() {\n    self$true_positives\n  },\n  reset_state = function() {\n    self$true_positives$assign(0.0)\n  }\n)\n\nmodel <- get_uncompiled_model()\nmodel %>% compile(\n    optimizer = optimizer_rmsprop(learning_rate = 1e-3),\n    loss = loss_sparse_categorical_crossentropy(),\n    metrics = list(categorical_true_positives()),\n)\nmodel %>% fit(x_train, y_train, batch_size = 64, epochs = 3)\n```\n:::\n\n\n### Handling losses and metrics that don't fit the standard signature\n\n\nThe overwhelming majority of losses and metrics can be computed from `y_true` and\n`y_pred`, where `y_pred` is an output of your model -- but not all of them. For\ninstance, a regularization loss may only require the activation of a layer (there are\nno targets in this case), and this activation may not be a model output.\n\nIn such cases, you can call `self$add_loss(loss_value)` from inside the call method of\na custom layer. Losses added in this way get added to the \"main\" loss during training\n(the one passed to `compile()`). Here's a simple example that adds activity\nregularization (note that activity regularization is built-in in all Keras layers --\nthis layer is just for the sake of providing a concrete example):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlayer_activity_regularization <- new_layer_class(\n  classname = \"activity_regularization\",\n  call = function(inputs) {\n    self$add_loss(tf$reduce_sum(inputs) * 0.1)\n    inputs # Pass-through layer.\n  }\n)\n\ninputs <- layer_input(shape = shape(784), name = \"digits\")\nx <- layer_dense(inputs, 64, activation = \"relu\", name = \"dense_1\")\n# Insert activity regularization as a layer\nx <- layer_activity_regularization(x)\nx <- layer_dense(x, 64, activation = \"relu\", name = \"dense_2\")\noutputs <- layer_dense(x, 10, name = \"predictions\")\n\nmodel <- keras_model(inputs = inputs, outputs = outputs)\nmodel %>% compile(\n    optimizer = optimizer_rmsprop(learning_rate = 1e-3),\n    loss = loss_sparse_categorical_crossentropy(from_logits = TRUE)\n)\n\n# The displayed loss will be much higher than before\n# due to the regularization component.\nmodel %>% fit(x_train, y_train, batch_size = 64, epochs = 1)\n```\n:::\n\n\nYou can do the same for logging metric values, using `add_metric()`:\n\n::: {.cell}\n\n```{.r .cell-code}\nlayer_metric_logging <- new_layer_class(\n  \"metric_logging\",\n  call = function(inputs) {\n    self$add_metric(\n      keras$backend$std(inputs), \n      name = \"std_of_activation\", \n      aggregation = \"mean\"\n    )\n    inputs\n  }\n)\n\ninputs <- layer_input(shape = shape(784), name = \"digits\")\nx <- layer_dense(inputs, 64, activation = \"relu\", name = \"dense_1\")\n\n# Insert std logging as a layer.\nx <- layer_metric_logging(x)\nx <- layer_dense(x, 64, activation = \"relu\", name = \"dense_2\")\noutputs <- layer_dense(x, 10, name = \"predictions\")\n\nmodel <- keras_model(inputs = inputs, outputs = outputs)\nmodel %>% compile(\n    optimizer = optimizer_rmsprop(learning_rate = 1e-3),\n    loss = loss_sparse_categorical_crossentropy(from_logits = TRUE)\n)\nmodel %>% fit(x_train, y_train, batch_size = 64, epochs = 1)\n```\n:::\n\n\nIn the [Functional API](/guides/functional_api/),\nyou can also call `model$add_loss(loss_tensor)`,\nor `model$add_metric(metric_tensor, name, aggregation)`.\n\nHere's a simple example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninputs <- layer_input(shape = shape(784), name = \"digits\")\nx1 <- layer_dense(inputs, 64, activation = \"relu\", name = \"dense_1\")\nx2 <- layer_dense(x1, 64, activation = \"relu\", name = \"dense_2\")\noutputs <- layer_dense(x2, 10, name = \"predictions\")\nmodel <- keras_model(inputs = inputs, outputs = outputs)\n\nmodel$add_loss(tf$reduce_sum(x1) * 0.1)\nmodel$add_metric(\n  keras$backend$std(x1), \n  name = \"std_of_activation\", \n  aggregation = \"mean\"\n)\n\nmodel %>% compile(\n    optimizer = optimizer_rmsprop(learning_rate = 1e-3),\n    loss = loss_sparse_categorical_crossentropy(from_logits = TRUE)\n)\nmodel %>% fit(x_train, y_train, batch_size = 64, epochs = 1)\n```\n:::\n\n\nNote that when you pass losses via `add_loss()`, it becomes possible to call\n`compile()` without a loss function, since the model already has a loss to minimize.\n\nConsider the following `LogisticEndpoint` layer: it takes as inputs\ntargets & logits, and it tracks a crossentropy loss via `add_loss()`. It also\ntracks classification accuracy via `add_metric()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlayer_logistic_endpoint <- new_layer_class(\n  \"logistic_endpoint\",\n  initialize = function(name = NULL) {\n    super()$`__init__`(name = name)\n    self$loss_fn <- loss_binary_crossentropy(from_logits = TRUE)\n    self$accuracy_fn <- metric_binary_accuracy()\n  },\n  call = function(targets, logits, sample_weights = NULL) {\n    # Compute the training-time loss value and add it\n    # to the layer using `self$add_loss()`.\n    loss <- self$loss_fn(targets, logits, sample_weights)\n    self$add_loss(loss)\n    \n    # Log accuracy as a metric and add it\n    # to the layer using `self$add_metric()`.\n    acc <- self$accuracy_fn(targets, logits, sample_weights)\n    self$add_metric(acc, name = \"accuracy\")\n    \n    # Return the inference-time prediction tensor (for `.predict()`).\n    tf$nn$softmax(logits)\n  }\n)\n```\n:::\n\n\nYou can use it in a model with two inputs (input data & targets), compiled without a\n`loss` argument, like this:\n\n::: {.cell}\n\n```{.r .cell-code}\ninputs <- layer_input(shape = shape(3), name = \"inputs\")\ntargets <- layer_input(shape = shape(10), name = \"targets\")\nlogits <- layer_dense(inputs, 10)\npredictions <- layer_logistic_endpoint(name = \"predictions\")(logits, targets)\n\nmodel <- keras_model(inputs = list(inputs, targets), outputs = predictions)\nmodel %>% compile(optimizer = \"adam\")  # No loss argument!\n\ndata <- list(\n    \"inputs\" = array(runif(3*3), dim = c(3,3)),\n    \"targets\" = array(runif(3*10), dim = c(3, 10))\n)\nmodel %>% fit(data, epochs = 1)\n```\n:::\n\n\nFor more information about training multi-input models, see the section **Passing data\nto multi-input, multi-output models**.\n\n\n### Automatically setting apart a validation holdout set\n\nIn the first end-to-end example you saw, we used the `validation_data` argument to pass\na listy of arrays `(x_val, y_val)` to the model for evaluating a validation loss\nand validation metrics at the end of each epoch.\n\nHere's another option: the argument `validation_split` allows you to automatically\nreserve part of your training data for validation. The argument value represents the\nfraction of the data to be reserved for validation, so it should be set to a number\nhigher than 0 and lower than 1. For instance, `validation_split = 0.2` means \"use 20% of\nthe data for validation\", and `validation_split = 0.6` means \"use 60% of the data for\nvalidation\".\n\nThe way the validation is computed is by taking the last x% samples of the arrays\nreceived by the `fit()` call, before any shuffling.\n\nNote that you can only use `validation_split` when training with array data.\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- get_compiled_model()\nmodel %>% fit(x_train, y_train, batch_size = 64, validation_split = 0.2, epochs = 1)\n```\n:::\n\n\n## Training & evaluation from TensorFlow Datasets\n\n\nIn the past few paragraphs, you've seen how to handle losses, metrics, and optimizers,\nand you've seen how to use the `validation_data` and `validation_split` arguments in\n`fit()`, when your data is passed as R arrays.\n\nLet's now take a look at the case where your data comes in the form of a\nTensorFlow dataset object.\n\n:::{.callout-note}\nThe tfdatasets package in R is an interface for the `tf.data` module in Python.\n:::\n\nThe `tf.data` API is a set of utilities in TensorFlow 2.0 for loading and preprocessing\ndata in a way that's fast and scalable.\n\nFor a complete guide about creating `Datasets`, see the\n[`tf.data` documentation](https://www.tensorflow.org/guide/data).\n\nYou can pass a `Dataset` instance directly to the methods `fit()`, `evaluate()`, and\n`predict()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tfdatasets)\nmodel <- get_compiled_model()\n\n# First, let's create a training Dataset instance.\n# For the sake of our example, we'll use the same MNIST data as before.\ntrain_dataset <- tensor_slices_dataset(list(x_train, y_train))\n# Shuffle and slice the dataset.\ntrain_dataset <- train_dataset %>% \n  dataset_shuffle(1024) %>% \n  dataset_batch(64)\n\n# Now we get a test dataset.\ntest_dataset <- list(x_test, y_test) %>% \n  tensor_slices_dataset() %>% \n  dataset_batch(64)\n\n# Since the dataset already takes care of batching,\n# we don't pass a `batch_size` argument.\nmodel %>% fit(train_dataset, epochs = 3)\n\n# You can also evaluate or predict on a dataset.\nresult <- model %>% evaluate(test_dataset)\nprint(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       loss sparse_categorical_accuracy \n                  0.1513888                   0.9552000 \n```\n:::\n:::\n\n\nNote that the Dataset is reset at the end of each epoch, so it can be reused of the\nnext epoch.\n\nIf you want to run training only on a specific number of batches from this Dataset, you\ncan pass the `steps_per_epoch` argument, which specifies how many training steps the\nmodel should run using this Dataset before moving on to the next epoch.\n\nIf you do this, the dataset is not reset at the end of each epoch, instead we just keep\ndrawing the next batches. The dataset will eventually run out of data (unless it is an\ninfinitely-looping dataset).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- get_compiled_model()\n\n# Prepare the training dataset\ntrain_dataset <- list(x_train, y_train) %>% \n  tensor_slices_dataset() %>% \n  dataset_shuffle(1024) %>% \n  dataset_batch(64)\n\n# Only use the 100 batches per epoch (that's 64 * 100 samples)\nmodel %>% fit(train_dataset, epochs = 3, steps_per_epoch = 100)\n```\n:::\n\n\n### Using a validation dataset\n\n\nYou can pass a `Dataset` instance as the `validation_data` argument in `fit()`:\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- get_compiled_model()\n\n# Prepare the training dataset\ntrain_dataset <- list(x_train, y_train) %>% \n  tensor_slices_dataset() %>% \n  dataset_shuffle(1024) %>% \n  dataset_batch(64)\n\n# Prepare the validation dataset\nval_dataset <- list(x_val, y_val) %>% \n  tensor_slices_dataset() %>% \n  dataset_batch(64)\n\nmodel %>% fit(train_dataset, epochs = 1, validation_data = val_dataset)\n```\n:::\n\n\nAt the end of each epoch, the model will iterate over the validation dataset and\ncompute the validation loss and validation metrics.\n\nIf you want to run validation only on a specific number of batches from this dataset,\nyou can pass the `validation_steps` argument, which specifies how many validation\nsteps the model should run with the validation dataset before interrupting validation\nand moving on to the next epoch:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- get_compiled_model()\n\n# Prepare the training dataset\ntrain_dataset <- list(x_train, y_train) %>% \n  tensor_slices_dataset() %>% \n  dataset_shuffle(1024) %>% \n  dataset_batch(64)\n\n# Prepare the validation dataset\nval_dataset <- list(x_val, y_val) %>% \n  tensor_slices_dataset() %>% \n  dataset_batch(64)\n\nmodel %>% fit(\n    train_dataset,\n    epochs = 1,\n    # Only run validation using the first 10 batches of the dataset\n    # using the `validation_steps` argument\n    validation_data = val_dataset,\n    validation_steps = 10,\n)\n```\n:::\n\n\nNote that the validation dataset will be reset after each use (so that you will always\nbe evaluating on the same samples from epoch to epoch).\n\nThe argument `validation_split` (generating a holdout set from the training data) is\nnot supported when training from `Dataset` objects, since this feature requires the\nability to index the samples of the datasets, which is not possible in general with\nthe `Dataset` API.\n\n<!-- ## Other input formats supported -->\n\n<!-- Besides R arrays, eager tensors, and TensorFlow `Datasets`, it's possible to train -->\n<!-- a Keras model using Pandas dataframes, or from Python generators that yield batches of -->\n<!-- data & labels. -->\n\n<!-- In particular, the `keras$utils$Sequence` class offers a simple interface to build -->\n<!-- Python data generators that are multiprocessing-aware and can be shuffled. -->\n\n<!-- In general, we recommend that you use: -->\n\n<!-- - NumPy input data if your data is small and fits in memory -->\n<!-- - `Dataset` objects if you have large datasets and you need to do distributed training -->\n<!-- - `Sequence` objects if you have large datasets and you need to do a lot of custom -->\n<!-- Python-side processing that cannot be done in TensorFlow (e.g. if you rely on external libraries -->\n<!-- for data loading or preprocessing). -->\n\n\n<!-- ## Using a `keras$utils$Sequence` object as input -->\n\n\n<!-- `keras$utils$Sequence` is a utility that you can subclass to obtain a Python generator with -->\n<!-- two important properties: -->\n\n<!-- - It works well with multiprocessing. -->\n<!-- - It can be shuffled (e.g. when passing `shuffle = TRUE` in `fit()`). -->\n\n<!-- A `Sequence` must implement two methods: -->\n\n<!-- - `__getitem__` -->\n<!-- - `__len__` -->\n\n<!-- The method `__getitem__` should return a complete batch. -->\n<!-- If you want to modify your dataset between epochs, you may implement `on_epoch_end`. -->\n\n<!-- Here's a quick example: -->\n\n<!-- ```python -->\n<!-- from skimage$io import imread -->\n<!-- from skimage$transform import resize -->\n<!-- import numpy as np -->\n\n<!-- # Here, `filenames` is list of path to the images -->\n\n<!-- # and `labels` are the associated labels. -->\n\n\n<!-- class CIFAR10Sequence(Sequence): -->\n<!--     initialize <- function(filenames, labels, batch_size) {    } -->\n<!--         self$filenames, self$labels = filenames, labels -->\n<!--         self$batch_size <- batch_size -->\n\n<!--     __len__ <- function() {    } -->\n<!--         return int(np$ceil(length(self$filenames) / float(self$batch_size))) -->\n\n<!--     __getitem__ <- function(idx) {    } -->\n<!--         batch_x <- self$filenames[idx * self$batch_size:(idx + 1) * self$batch_size] -->\n<!--         batch_y <- self$labels[idx * self$batch_size:(idx + 1) * self$batch_size] -->\n<!--         return np$array([ -->\n<!--             resize(imread(filename), (200, 200)) -->\n<!--                for filename in batch_x]), np$array(batch_y) -->\n\n<!-- sequence <- CIFAR10Sequence(filenames, labels, batch_size) -->\n<!-- model %>% fit(sequence, epochs = 10) -->\n\n## Using sample weighting and class weighting\n\nWith the default settings the weight of a sample is decided by its frequency\nin the dataset. There are two methods to weight the data, independent of\nsample frequency:\n\n* Class weights\n* Sample weights\n\n### Class weights\n\nThis is set by passing a dictionary to the `class_weight` argument to\n`Model %>% fit()`. This dictionary maps class indices to the weight that should\nbe used for samples belonging to this class.\n\nThis can be used to balance classes without resampling, or to train a\nmodel that gives more importance to a particular class.\n\nFor instance, if class \"0\" is half as represented as class \"1\" in your data,\nyou could use `Model %>% fit(..., class_weight = list(0= 1., 1= 0.5))`.\n\nHere's an example where we use class weights or sample weights to\ngive more importance to the correct classification of class #5 (which\nis the digit \"5\" in the MNIST dataset).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_weight <- list(\n    \"0\" = 1.0,\n    \"1\" = 1.0,\n    \"2\" = 1.0,\n    \"3\" = 1.0,\n    \"4\" = 1.0,\n    # Set weight \"2\" for class \"5\",\n    # making this class 2x more important\n    \"5\" = 2.0,\n    \"6\" = 1.0,\n    \"7\" = 1.0,\n    \"8\" = 1.0,\n    \"9\" = 1.0\n)\n\nmodel <- get_compiled_model()\nmodel %>% fit(x_train, y_train, class_weight = class_weight, batch_size = 64, epochs = 1)\n```\n:::\n\n\n### Sample weights\n\nFor fine grained control, or if you are not building a classifier,\nyou can use \"sample weights\".\n\n- When training from R data: Pass the `sample_weight`\n  argument to `Model %>% fit()`.\n- When training from tfdatasets or any other sort of iterator:\n  Yield `(input_batch, label_batch, sample_weight_batch)` tuples.\n\nA \"sample weights\" array is an array of numbers that specify how much weight\neach sample in a batch should have in computing the total loss. It is commonly\nused in imbalanced classification problems (the idea being to give more weight\nto rarely-seen classes).\n\nWhen the weights used are ones and zeros, the array can be used as a *mask* for\nthe loss function (entirely discarding the contribution of certain samples to\nthe total loss).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_weight <- rep(1, length(y_train))\nsample_weight[y_train == 5] <- 2.0\n\nmodel <- get_compiled_model()\nmodel %>% fit(x_train, y_train, sample_weight = sample_weight, batch_size = 64, epochs = 1)\n```\n:::\n\n\nHere's a matching `Dataset` example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_weight <- rep(1, length(y_train))\nsample_weight[y_train == 5] <- 2.0\n\n# Create a Dataset that includes sample weights\n# (3rd element in the return tuple).\ntrain_dataset <- list(x_train, y_train, sample_weight) %>% \n  tensor_slices_dataset()\n\n# Shuffle and slice the dataset.\ntrain_dataset <- train_dataset %>% \n  dataset_shuffle(1024) %>% \n  dataset_batch(64)\n\nmodel <- get_compiled_model()\nmodel %>% fit(train_dataset, epochs = 1)\n```\n:::\n\n\n## Passing data to multi-input, multi-output models\n\nIn the previous examples, we were considering a model with a single input (a tensor of\nshape `(764)`) and a single output (a prediction tensor of shape `(10)`). But what\nabout models that have multiple inputs or outputs?\n\nConsider the following model, which has an image input of shape `(32, 32, 3)` (that's\n`(height, width, channels)`) and a time series input of shape `(NULL, 10)` (that's\n`(timesteps, features)`). Our model will have two outputs computed from the\ncombination of these inputs: a \"score\" (of shape `(1)`) and a probability\ndistribution over five classes (of shape `(5)`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimage_input <- layer_input(shape = shape(32, 32, 3), name = \"img_input\")\ntimeseries_input <- layer_input(shape = shape(NULL, 10), name = \"ts_input\")\n\nx1 <- layer_conv_2d(image_input, 3, 3)\nx1 <- layer_global_max_pooling_2d(x1)\n\nx2 <- layer_conv_1d(timeseries_input, 3, 3)\nx2 <- layer_global_max_pooling_1d(x2)\n\nx <- layer_concatenate(list(x1, x2))\n\nscore_output <- layer_dense(x, 1, name = \"score_output\")\nclass_output <- layer_dense(x, 5, name = \"class_output\")\n\nmodel <- keras_model(\n    inputs = list(image_input, timeseries_input), \n    outputs = list(score_output, class_output)\n)\n```\n:::\n\n\nLet's plot this model, so you can clearly see what we're doing here (note that the\nshapes shown in the plot are batch shapes, rather than per-sample shapes).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkeras$utils$plot_model(\n  model, \"img/multi_input_and_output_model.png\", \n  show_shapes = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<IPython.core.display.Image object>\n```\n:::\n:::\n\n\n![](img/multi_input_and_output_model.png)\n\n\nAt compilation time, we can specify different losses to different outputs, by passing\nthe loss functions as a list:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel %>% compile(\n  optimizer = optimizer_rmsprop(1e-3),\n  loss = list(\n    loss_mean_squared_error(),\n    loss_categorical_crossentropy()\n  )\n)\n```\n:::\n\n\nIf we only passed a single loss function to the model, the same loss function would be\napplied to every output (which is not appropriate here).\n\nLikewise for metrics:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel %>% compile(\n  optimizer = optimizer_rmsprop(1e-3),\n  loss = list(\n    loss_mean_squared_error(),\n    loss_categorical_crossentropy()\n  ),\n  metrics = list(\n    list(\n      metric_mean_absolute_percentage_error(),\n      metric_mean_absolute_error()\n    ),\n    list(\n      metric_categorical_accuracy()\n    )\n  )\n)\n```\n:::\n\n\nSince we gave names to our output layers, we could also specify per-output losses and\nmetrics via a dict:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel %>% compile(\n  optimizer = optimizer_rmsprop(1e-3),\n  loss = list(\n    score_output = loss_mean_squared_error(),\n    class_output = loss_categorical_crossentropy()\n  ),\n  metrics = list(\n    class_output = list(\n      metric_categorical_accuracy()\n    ),\n    score_output = list(\n      metric_mean_absolute_percentage_error(),\n      metric_mean_absolute_error()\n    )\n  )\n)\n```\n:::\n\n\nWe recommend the use of explicit names and dicts if you have more than 2 outputs.\n\nIt's possible to give different weights to different output-specific losses (for\ninstance, one might wish to privilege the \"score\" loss in our example, by giving to 2x\nthe importance of the class loss), using the `loss_weights` argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel %>% compile(\n  optimizer = optimizer_rmsprop(1e-3),\n  loss = list(\n    score_output = loss_mean_squared_error(),\n    class_output = loss_categorical_crossentropy()\n  ),\n  metrics = list(\n    class_output = list(\n      metric_categorical_accuracy()\n    ),\n    score_output = list(\n      metric_mean_absolute_percentage_error(),\n      metric_mean_absolute_error()\n    )\n  ),\n  loss_weights = list(score_output = 2.0, class_output = 1.0)\n)\n```\n:::\n\n\n\nYou could also choose not to compute a loss for certain outputs, if these outputs are\nmeant for prediction but not for training:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# List loss version\nmodel %>% compile(\n  optimizer = optimizer_rmsprop(1e-3),\n  loss = list(\n    NULL,\n    loss_categorical_crossentropy()\n  )\n)\n\n# Or dict loss version\nmodel %>% compile(\n  optimizer = optimizer_rmsprop(1e-3),\n  loss = list(\n    class_output = loss_categorical_crossentropy()\n  )\n)\n```\n:::\n\n\nPassing data to a multi-input or multi-output model in `fit()` works in a similar way as\nspecifying a loss function in compile: you can pass **lists of R arrays** (with\n1:1 mapping to the outputs that received a loss function) or **named list mapping output\nnames to R arrays**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel %>% compile(\n  optimizer = optimizer_rmsprop(1e-3),\n  loss = list(\n    loss_mean_squared_error(),\n    loss_categorical_crossentropy()\n  )\n)\n# Generate dummy NumPy data\n\nimg_data <- array(runif(100*32*32*3), dim = c(100, 32, 32, 3))\nts_data <- array(runif(100*20*10), dim = c(100, 20, 10))\nscore_targets <- array(runif(100), dim = c(100, 1))\nclass_targets <- array(runif(100*5), dim = c(100, 5))\n\n# Fit on lists\nmodel %>% fit(\n  list(img_data, ts_data), \n  list(score_targets, class_targets), \n  batch_size = 32, \n  epochs = 1\n)\n\n# Alternatively, fit on named lists\nmodel %>% fit(\n    list(\"img_input\" = img_data, \"ts_input\" = ts_data),\n    list(\"score_output\" = score_targets, \"class_output\" = class_targets),\n    batch_size = 32,\n    epochs = 1\n)\n```\n:::\n\n\nHere's the `Dataset` use case: similarly as what we did for R arrays, the `Dataset`\nshould return a tuple of dicts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_dataset <- list(\n  list(\"img_input\" = img_data, \"ts_input\" = ts_data),\n  list(\"score_output\" = score_targets, \"class_output\" = class_targets)\n) %>% \n  tensor_slices_dataset() %>% \n  dataset_shuffle(1024) %>% \n  dataset_batch(64)\n\nmodel %>% fit(train_dataset, epochs = 1)\n```\n:::\n\n\n## Using callbacks\n\nCallbacks in Keras are objects that are called at different points during training (at\nthe start of an epoch, at the end of a batch, at the end of an epoch, etc.). They\ncan be used to implement certain behaviors, such as:\n\n- Doing validation at different points during training (beyond the built-in per-epoch\nvalidation)\n- Checkpointing the model at regular intervals or when it exceeds a certain accuracy\nthreshold\n- Changing the learning rate of the model when training seems to be plateauing\n- Doing fine-tuning of the top layers when training seems to be plateauing\n- Sending email or instant message notifications when training ends or where a certain\nperformance threshold is exceeded\n- Etc.\n\nCallbacks can be passed as a list to your call to `fit()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- get_compiled_model()\n\ncallbacks <- list(\n  callback_early_stopping(\n    # Stop training when `val_loss` is no longer improving\n    monitor = \"val_loss\",\n    # \"no longer improving\" being defined as \"no better than 1e-2 less\"\n    min_delta = 1e-2,\n    # \"no longer improving\" being further defined as \"for at least 2 epochs\"\n    patience = 2,\n    verbose = 1,\n  )\n)\n\nmodel %>% fit(\n    x_train,\n    y_train,\n    epochs = 20,\n    batch_size = 64,\n    callbacks = callbacks,\n    validation_split = 0.2,\n)\n```\n:::\n\n\n### Many built-in callbacks are available\n\nThere are many built-in callbacks already available in Keras, such as:\n\n- `callback_model_checkpoint()`: Periodically save the model.\n- `callback_early_stopping()`: Stop training when training is no longer improving the validation\nmetrics.\n- `callback_tensorboard()`: periodically write model logs that can be visualized in\n[TensorBoard](https://www.tensorflow.org/tensorboard) (more details in the section\n\"Visualization\").\n- `callback_csv_logger()`: streams loss and metrics data to a CSV file.\n- etc.\n\nSee the [callbacks documentation](/api/callbacks/) for the complete list.\n\n### Writing your own callback\n\nYou can create a custom callback by extending the base class\n`keras$callbacks$Callback`. A callback has access to its associated model through the\nclass property `self$model`.\n\nMake sure to read the\n[complete guide to writing custom callbacks](/guides/writing_your_own_callbacks/).\n\nHere's a simple example saving a list of per-batch loss values during training:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncallback_loss_history <- new_callback_class(\n  \"loss_history\",\n  on_train_begin = function(logs) {\n    self$per_batch_losses <- list()\n  },\n  on_batch_end = function(batch, logs) {\n    self$per_batch_losses <- c(\n      self$per_batch_losses,\n      logs$get(\"loss\")\n    )\n  }\n)\n```\n:::\n\n\n## Checkpointing models\n\nWhen you're training model on relatively large datasets, it's crucial to save\ncheckpoints of your model at frequent intervals.\n\nThe easiest way to achieve this is with the `callback_model_checkpoint()` callback:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- get_compiled_model()\n\ncallbacks <- list(\n  callback_model_checkpoint(\n    # Path where to save the model\n    # The two parameters below mean that we will overwrite\n    # the current checkpoint if and only if\n    # the `val_loss` score has improved.\n    # The saved model name will include the current epoch.\n    filepath = \"mymodel_{epoch}\",\n    save_best_only = TRUE,  # Only save a model if `val_loss` has improved.\n    monitor = \"val_loss\",\n    verbose = 1,\n  )\n)\n\nmodel %>% fit(\n    x_train, \n    y_train, \n    epochs = 2, \n    batch_size = 64, \n    callbacks = callbacks, \n    validation_split = 0.2\n)\n```\n:::\n\n\nThe `callback_model_checkpoint()` callback can be used to implement fault-tolerance:\nthe ability to restart training from the last saved state of the model in case training\ngets randomly interrupted. Here's a basic example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare a directory to store all the checkpoints.\ncheckpoint_dir <- \"./ckpt\"\ndir.create(checkpoint_dir, showWarnings = FALSE)\n\n\nmake_or_restore_model <- function() {\n  # Either restore the latest model, or create a fresh one\n  # if there is no checkpoint available.\n  checkpoints <- list.files(checkpoint_dir, full.names = TRUE)\n  details <- file.info(checkpoints)\n  if (length(checkpoints) > 0) {\n    latest_checkpoint <- checkpoints[which.max(as.POSIXct(details$mtime))]\n    cat(\"Restoring from\", latest_checkpoint)\n    return(load_model_tf(latest_checkpoint))\n  }\n  \n  cat(\"Creating a new model\")\n  get_compiled_model()\n}\n\nmodel <- make_or_restore_model()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRestoring from ./ckpt/ckpt-loss=0.30\n```\n:::\n\n```{.r .cell-code}\ncallbacks <- list(\n    # This callback saves a SavedModel every 100 batches.\n    # We include the training loss in the saved model name.\n    callback_model_checkpoint(\n        filepath = paste0(checkpoint_dir, \"/ckpt-loss={loss:.2f}\"), \n        save_freq = 100\n    )\n)\nmodel %>% fit(x_train, y_train, epochs = 1, callbacks = callbacks)\n```\n:::\n\n\nYou call also write your own callback for saving and restoring models.\n\nFor a complete guide on serialization and saving, see the\n[guide to saving and serializing Models](/guides/serialization_and_saving/).\n\n## Using learning rate schedules\n\nA common pattern when training deep learning models is to gradually reduce the learning\nas training progresses. This is generally known as \"learning rate decay\".\n\nThe learning decay schedule could be static (fixed in advance, as a function of the\ncurrent epoch or the current batch index), or dynamic (responding to the current\nbehavior of the model, in particular the validation loss).\n\n### Passing a schedule to an optimizer\n\nYou can easily use a static learning rate decay schedule by passing a schedule object\nas the `learning_rate` argument in your optimizer:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninitial_learning_rate <- 0.1\nlr_schedule <- learning_rate_schedule_exponential_decay(\n  initial_learning_rate = initial_learning_rate,\n  decay_steps = 100000, \n  decay_rate = 0.96, \n  staircase = TRUE\n)\n\noptimizer <- keras$optimizers$RMSprop(learning_rate = lr_schedule)\n```\n:::\n\n\nSeveral built-in schedules are available: learning_rate_schedule_cosine_decay, learning_rate_schedule_cosine_decay_restarts, learning_rate_schedule_exponential_decay, learning_rate_schedule_inverse_time_decay, learning_rate_schedule_piecewise_constant_decay, learning_rate_schedule_polynomial_decay\n\n### Using callbacks to implement a dynamic learning rate schedule\n\nA dynamic learning rate schedule (for instance, decreasing the learning rate when the\nvalidation loss is no longer improving) cannot be achieved with these schedule objects,\nsince the optimizer does not have access to validation metrics.\n\nHowever, callbacks do have access to all metrics, including validation metrics! You can\nthus achieve this pattern by using a callback that modifies the current learning rate\non the optimizer. In fact, this is even built-in as the `callback_reduce_lr_on_plateau()` callback.\n\n## Visualizing loss and metrics during training\n\nThe best way to keep an eye on your model during training is to use\n[TensorBoard](https://www.tensorflow.org/tensorboard) -- a browser-based application\nthat you can run locally that provides you with:\n\n- Live plots of the loss and metrics for training and evaluation\n- (optionally) Visualizations of the histograms of your layer activations\n- (optionally) 3D visualizations of the embedding spaces learned by your `Embedding`\nlayers\n\nIf you have installed TensorFlow with pip, you should be able to launch TensorBoard\nfrom R with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntensorflow::tensorboard(log_dir = \"/full_path_to_your_logs\")\n```\n:::\n\n\n### Using the TensorBoard callback\n\nThe easiest way to use TensorBoard with a Keras model and the `fit()` method is the\n`TensorBoard` callback.\n\nIn the simplest case, just specify where you want the callback to write logs, and\nyou're good to go:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncallback_tensorboard(\n    log_dir = \"/full_path_to_your_logs\",\n    histogram_freq = 0,  # How often to log histogram visualizations\n    embeddings_freq = 0,  # How often to log embedding visualizations\n    update_freq = \"epoch\" # How often to write logs (default: once per epoch)\n)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<keras.callbacks.TensorBoard object at 0x7f8d71ee4850>\n```\n:::\n:::\n\n\nFor more information, see the\n[documentation for the `TensorBoard` callback](https://keras$io/api/callbacks/tensorboard/).\n\n---\nformat: html\n---\n\n## Environment Details\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### Tensorflow Version\n\n::: {.cell}\n\n```{.r .cell-code}\ntensorflow::tf_config()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTensorFlow v2.11.0 (~/.virtualenvs/r-tensorflow-website/lib/python3.10/site-packages/tensorflow)\nPython v3.10 (~/.virtualenvs/r-tensorflow-website/bin/python)\n```\n:::\n:::\n:::\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### R Environment Information\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.5 LTS\n\nMatrix products: default\nBLAS:   /home/tomasz/opt/R-4.2.1/lib/R/lib/libRblas.so\nLAPACK: /usr/lib/x86_64-linux-gnu/libmkl_intel_lp64.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] tfdatasets_2.9.0.9000 keras_2.9.0.9000      tensorflow_2.9.0.9000\n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.9           pillar_1.8.1         compiler_4.2.1      \n [4] base64enc_0.1-3      tools_4.2.1          zeallot_0.1.0       \n [7] digest_0.6.31        jsonlite_1.8.4       evaluate_0.18       \n[10] lifecycle_1.0.3      tibble_3.1.8         lattice_0.20-45     \n[13] pkgconfig_2.0.3      png_0.1-8            rlang_1.0.6         \n[16] Matrix_1.5-3         cli_3.4.1            yaml_2.3.6          \n[19] xfun_0.35            fastmap_1.1.0        stringr_1.5.0       \n[22] knitr_1.41           generics_0.1.3       vctrs_0.5.1         \n[25] htmlwidgets_1.5.4    tidyselect_1.2.0     rprojroot_2.0.3     \n[28] grid_4.2.1           reticulate_1.26-9000 glue_1.6.2          \n[31] here_1.0.1           R6_2.5.1             fansi_1.0.3         \n[34] rmarkdown_2.18       magrittr_2.0.3       whisker_0.4.1       \n[37] htmltools_0.5.4      tfruns_1.5.1         utf8_1.2.2          \n[40] stringi_1.7.8       \n```\n:::\n:::\n:::\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### Python Environment Information\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem2(reticulate::py_exe(), c(\"-m pip freeze\"), stdout = TRUE) |> writeLines()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nabsl-py==1.3.0\nasttokens==2.2.1\nastunparse==1.6.3\nbackcall==0.2.0\ncachetools==5.2.0\ncertifi==2022.12.7\ncharset-normalizer==2.1.1\ndecorator==5.1.1\ndill==0.3.6\netils==0.9.0\nexecuting==1.2.0\nflatbuffers==22.12.6\ngast==0.4.0\ngoogle-auth==2.15.0\ngoogle-auth-oauthlib==0.4.6\ngoogle-pasta==0.2.0\ngoogleapis-common-protos==1.57.0\ngrpcio==1.51.1\nh5py==3.7.0\nidna==3.4\nimportlib-resources==5.10.1\nipython==8.7.0\njedi==0.18.2\nkaggle==1.5.12\nkeras==2.11.0\nkeras-tuner==1.1.3\nkt-legacy==1.0.4\nlibclang==14.0.6\nMarkdown==3.4.1\nMarkupSafe==2.1.1\nmatplotlib-inline==0.1.6\nnumpy==1.23.5\noauthlib==3.2.2\nopt-einsum==3.3.0\npackaging==22.0\npandas==1.5.2\nparso==0.8.3\npexpect==4.8.0\npickleshare==0.7.5\nPillow==9.3.0\npromise==2.3\nprompt-toolkit==3.0.36\nprotobuf==3.19.6\nptyprocess==0.7.0\npure-eval==0.2.2\npyasn1==0.4.8\npyasn1-modules==0.2.8\npydot==1.4.2\nPygments==2.13.0\npyparsing==3.0.9\npython-dateutil==2.8.2\npython-slugify==7.0.0\npytz==2022.6\nPyYAML==6.0\nrequests==2.28.1\nrequests-oauthlib==1.3.1\nrsa==4.9\nscipy==1.9.3\nsix==1.16.0\nstack-data==0.6.2\ntensorboard==2.11.0\ntensorboard-data-server==0.6.1\ntensorboard-plugin-wit==1.8.1\ntensorflow==2.11.0\ntensorflow-datasets==4.7.0\ntensorflow-estimator==2.11.0\ntensorflow-hub==0.12.0\ntensorflow-io-gcs-filesystem==0.28.0\ntensorflow-metadata==1.12.0\ntermcolor==2.1.1\ntext-unidecode==1.3\ntoml==0.10.2\ntqdm==4.64.1\ntraitlets==5.7.1\ntyping_extensions==4.4.0\nurllib3==1.26.13\nwcwidth==0.2.5\nWerkzeug==2.2.2\nwrapt==1.14.1\nzipp==3.11.0\n```\n:::\n:::\n:::\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### Additional Information\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nTF Devices:\n-  PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU') \n-  PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU') \nCPU cores: 12 \nDate rendered: 2022-12-16 \nPage render time: 1 minutes and 32 seconds\n```\n:::\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}