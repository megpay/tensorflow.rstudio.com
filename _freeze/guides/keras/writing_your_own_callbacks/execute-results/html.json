{
  "hash": "4dd285d7ba12186fdecbc69028929802",
  "result": {
    "markdown": "---\ntitle: Writing your own callbacks\n# author: Rick Chao, Francois Chollet, Tomasz Kalinowski\ndescription: > \n  Guide to writing Keras callbacks for customizing the behavior during model\n  training, evaluation, or inference.\naliases:\n  - ../../articles/new-guides/writing_your_own_callbacks.html\n  - ../../articles/training_callbacks.html\n  - ../../guide/keras/training_callbacks/index.html\n---\n\n\n## Introduction\n\nA callback is a powerful tool to customize the behavior of a Keras model\nduring training, evaluation, or inference. Examples include\n`callback_tensorboard()` to visualize training progress and results with\nTensorBoard, or `callback_model_checkpoint()` to periodically save your\nmodel during training.\n\nIn this guide, you will learn what a Keras callback is, what it can do,\nand how you can build your own. We provide a few demos of simple\ncallback applications to get you started.\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tensorflow)\nlibrary(keras)\nenvir::import_from(dplyr, last)\n\ntf_version()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] '2.11'\n```\n:::\n:::\n\n\n## Keras callbacks overview\n\nAll callbacks subclass the `keras$callbacks$Callback` class, and\noverride a set of methods called at various stages of training, testing,\nand predicting. Callbacks are useful to get a view on internal states\nand statistics of the model during training.\n\nYou can pass a list of callbacks (as a named argument `callbacks`) to\nthe following keras model methods:\n\n-   `fit()`\n-   `evaluate()`\n-   `predict()`\n\n<!-- -->\n\n## An overview of callback methods\n\n### Global methods\n\n#### `on_(train|test|predict)_begin(logs = NULL)`\n\nCalled at the beginning of `fit`/`evaluate`/`predict`.\n\n#### `on_(train|test|predict)_end(logs = NULL)`\n\nCalled at the end of `fit`/`evaluate`/`predict`.\n\n### Batch-level methods for training/testing/predicting\n\n#### `on_(train|test|predict)_batch_begin(logs = NULL)`\n\nCalled right before processing a batch during\ntraining/testing/predicting.\n\n#### `on_(train|test|predict)_batch_end(batch, logs = NULL)`\n\nCalled at the end of training/testing/predicting a batch. Within this\nmethod, `logs` is a dict containing the metrics results.\n\n### Epoch-level methods (training only)\n\n#### `on_epoch_begin(epoch, logs = NULL)`\n\nCalled at the beginning of an epoch during training.\n\n#### `on_epoch_end(epoch, logs = NULL)`\n\nCalled at the end of an epoch during training.\n\n## A basic example\n\nLet's take a look at a concrete example. To get started, let's import\ntensorflow and define a simple Sequential Keras model:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_model <- function() {\n  model <- keras_model_sequential() %>%\n    layer_dense(1, input_shape = 784) %>%\n    compile(\n      optimizer = optimizer_rmsprop(learning_rate=0.1),\n      loss = \"mean_squared_error\",\n      metrics = \"mean_absolute_error\"\n    )\n  model\n}\n```\n:::\n\n\nThen, load the MNIST data for training and testing from Keras datasets\nAPI:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmnist <- dataset_mnist()\n\nflatten_and_rescale <- function(x) {\n  x <- array_reshape(x, c(-1, 784))\n  x <- x / 255\n  x\n}\n\nmnist$train$x <- flatten_and_rescale(mnist$train$x)\nmnist$test$x  <- flatten_and_rescale(mnist$test$x)\n\n# limit to 500 samples\nmnist$train$x <- mnist$train$x[1:500, ]\nmnist$train$y <- mnist$train$y[1:500]\nmnist$test$x  <- mnist$test$x[1:500, ]\nmnist$test$y  <- mnist$test$y[1:500]\n```\n:::\n\n\nNow, define a simple custom callback that logs:\n\n-   When `fit`/`evaluate`/`predict` starts & ends\n-   When each epoch starts & ends\n-   When each training batch starts & ends\n-   When each evaluation (test) batch starts & ends\n-   When each inference (prediction) batch starts & ends\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow <- function(msg, logs) {\n  cat(glue::glue(msg, .envir = parent.frame()),\n      \"got logs: \", sep = \"; \")\n  logs %>% \n    lapply(signif, digits = 3) %>% \n    dput(control = \"niceNames\")\n}\n\nCustomCallback(keras$callbacks$Callback) %py_class% {\n  on_train_begin <- function(logs = NULL)\n    show(\"Starting training\", logs)\n\n  on_train_end <- function(logs = NULL)\n    show(\"Stop training\", logs)\n\n  on_epoch_begin <- function(epoch, logs = NULL)\n    show(\"Start epoch {epoch} of training\", logs)\n\n  on_epoch_end <- function(epoch, logs = NULL)\n    show(\"End epoch {epoch} of training\", logs)\n\n  on_test_begin <- function(logs = NULL)\n    show(\"Start testing\", logs)\n\n  on_test_end <- function(logs = NULL)\n    show(\"Stop testing\", logs)\n\n  on_predict_begin <- function(logs = NULL)\n    show(\"Start predicting\", logs)\n\n  on_predict_end <- function(logs = NULL)\n    show(\"Stop predicting\", logs)\n\n  on_train_batch_begin <- function(batch, logs = NULL)\n    show(\"...Training: start of batch {batch}\", logs)\n\n  on_train_batch_end <- function(batch, logs = NULL)\n    show(\"...Training: end of batch {batch}\",  logs)\n\n  on_test_batch_begin <- function(batch, logs = NULL)\n    show(\"...Evaluating: start of batch {batch}\", logs)\n\n  on_test_batch_end <- function(batch, logs = NULL)\n    show(\"...Evaluating: end of batch {batch}\", logs)\n\n  on_predict_batch_begin <- function(batch, logs = NULL)\n    show(\"...Predicting: start of batch {batch}\", logs)\n\n  on_predict_batch_end <- function(batch, logs = NULL)\n    show(\"...Predicting: end of batch {batch}\", logs)\n}\n```\n:::\n\n\nLet's try it out:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel <- get_model()\nmodel %>% fit(\n  mnist$train$x,\n  mnist$train$y,\n  batch_size = 128,\n  epochs = 2,\n  verbose = 0,\n  validation_split = 0.5,\n  callbacks = list(CustomCallback())\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStarting training; got logs: list()\nStart epoch 0 of training; got logs: list()\n...Training: start of batch 0; got logs: list()\n...Training: end of batch 0; got logs: list(loss = 29.5, mean_absolute_error = 4.6)\n...Training: start of batch 1; got logs: list()\n...Training: end of batch 1; got logs: list(loss = 454, mean_absolute_error = 16)\nStart testing; got logs: list()\n...Evaluating: start of batch 0; got logs: list()\n...Evaluating: end of batch 0; got logs: list(loss = 29, mean_absolute_error = 4.64)\n...Evaluating: start of batch 1; got logs: list()\n...Evaluating: end of batch 1; got logs: list(loss = 27.8, mean_absolute_error = 4.48)\nStop testing; got logs: list(loss = 27.8, mean_absolute_error = 4.48)\nEnd epoch 0 of training; got logs: list(loss = 454, mean_absolute_error = 16, val_loss = 27.8, val_mean_absolute_error = 4.48)\nStart epoch 1 of training; got logs: list()\n...Training: start of batch 0; got logs: list()\n...Training: end of batch 0; got logs: list(loss = 28.1, mean_absolute_error = 4.45)\n...Training: start of batch 1; got logs: list()\n...Training: end of batch 1; got logs: list(loss = 18.6, mean_absolute_error = 3.5)\nStart testing; got logs: list()\n...Evaluating: start of batch 0; got logs: list()\n...Evaluating: end of batch 0; got logs: list(loss = 7.18, mean_absolute_error = 2.18)\n...Evaluating: start of batch 1; got logs: list()\n...Evaluating: end of batch 1; got logs: list(loss = 7.26, mean_absolute_error = 2.21)\nStop testing; got logs: list(loss = 7.26, mean_absolute_error = 2.21)\nEnd epoch 1 of training; got logs: list(loss = 18.6, mean_absolute_error = 3.5, val_loss = 7.26, \n    val_mean_absolute_error = 2.21)\nStop training; got logs: list(loss = 18.6, mean_absolute_error = 3.5, val_loss = 7.26, \n    val_mean_absolute_error = 2.21)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nres <- model %>%\n  evaluate(\n    mnist$test$x,\n    mnist$test$y,\n    batch_size = 128,\n    verbose = 0,\n    callbacks = list(CustomCallback())\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStart testing; got logs: list()\n...Evaluating: start of batch 0; got logs: list()\n...Evaluating: end of batch 0; got logs: list(loss = 7.24, mean_absolute_error = 2.19)\n...Evaluating: start of batch 1; got logs: list()\n...Evaluating: end of batch 1; got logs: list(loss = 6.74, mean_absolute_error = 2.13)\n...Evaluating: start of batch 2; got logs: list()\n...Evaluating: end of batch 2; got logs: list(loss = 6.65, mean_absolute_error = 2.13)\n...Evaluating: start of batch 3; got logs: list()\n...Evaluating: end of batch 3; got logs: list(loss = 6.96, mean_absolute_error = 2.18)\nStop testing; got logs: list(loss = 6.96, mean_absolute_error = 2.18)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nres <- model %>%\n  predict(mnist$test$x,\n          batch_size = 128,\n          callbacks = list(CustomCallback()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStart predicting; got logs: list()\n...Predicting: start of batch 0; got logs: list()\n...Predicting: end of batch 0; got logs: list(outputs = c(3.61, 2.54, 1.69, 4.21, 2.99, 2.35, 3.61, 4.11, \n4.17, 6.08, 1.26, 2.57, 4.64, 2.6, 2.67, 2.44, 4.03, 3.74, 4.48, \n2.89, 5.22, 3.67, 2.66, 2.68, 2.33, 4.17, 2.8, 3.44, 3.28, 1.81, \n3.31, 1.85, 3.32, 2.57, 4.62, 2.51, 4.45, 2.2, 2.08, 3.13, 1.11, \n3.36, 4.35, 1.69, 2.34, 2.21, 2.44, 2.83, 6.24, 3.31, 2.98, 3.97, \n3.21, 1.26, 2.02, 3.27, 3.87, 1.83, 4.81, 2.06, 3.95, 4.19, 2.91, \n3.06, 5.01, 2.51, 2.88, 3.59, 4.77, 0.765, 3.01, 2.34, 2.28, \n5.03, 2.46, 4.43, 2.17, 2.68, 4.27, 7.27, 4.66, 4.27, 4.09, 3.63, \n4.37, 5.24, 5.34, 3.15, 4.09, 2.76, 2.21, 4.12, 2.74, 4.87, 3.69, \n6.26, 1.83, 4.68, 2.96, 5.42, 2.68, 1.9, 4.3, 3.65, 2.72, 3.88, \n2.42, 1.92, 4.22, 3.22, 3.22, 3.35, 2.48, 5.08, 3.65, 3.46, 3.16, \n3.9, 3.5, 4.35, 3.88, 3.29, 2.64, 4.32, 4.87, 3.53, 2.35, 4.2\n))\n...Predicting: start of batch 1; got logs: list()\n...Predicting: end of batch 1; got logs: list(outputs = c(6.39, 3.42, 5.3, 5.04, 3.28, 5.02, 3.65, 3.08, \n2.49, 3.47, 3.69, 4.89, 2.66, 2.58, 2.98, 2.02, 4.87, 1.54, 5.03, \n4.42, 2.21, 2.55, 3.8, 4.52, 3.12, 2.29, 1.79, 4.28, 2.33, 2.89, \n2.79, 2.77, 4.67, 2.95, 4.2, 5.05, 3.12, 2.94, 3.56, 2.36, 2.14, \n3.6, 3.1, 5.51, 2.12, 1.79, 3.52, 1.73, 1.38, 3.98, 2.27, 3.98, \n2.13, 4.19, 2.75, 1.24, 3.31, 4.04, 4.4, 3.09, 1.94, 1.28, 3.66, \n1.65, 2.55, 3.62, 2.72, 2.06, 3.25, 4.92, 3.75, 4.94, 5.85, 3.06, \n1.72, 1.59, 1.71, 2.03, 5.81, 3.16, 3.14, 5.89, 2.77, 2.99, 5.42, \n2.41, 6.04, 3.92, 3.1, 3.89, 3.32, 2.73, 4.58, 3.65, 6.16, 5.01, \n0.931, 2.77, 4.88, 2.07, 1.93, 2.73, 2.87, 1.67, 4.2, 5.95, 2.61, \n3.27, 4, 3.67, 4.04, 2.12, 2.55, 3.84, 5.67, 3.32, 2.43, 1.53, \n2.04, 4.01, 5.12, 2.7, 5.95, 1.57, 5.86, 2.07, 3.13, 3.23))\n...Predicting: start of batch 2; got logs: list()\n...Predicting: end of batch 2; got logs: list(outputs = c(3.1, 3.72, 4.07, 2.88, 4.5, 2.39, 2.34, 4.2, \n3.33, 2.9, 4.67, 3.1, 2.41, 1.07, 3.17, 3.26, 2.09, 4.76, 5.23, \n4.59, 2.75, 5.72, 3.93, 1.73, 3.2, 4.68, 3.54, 2.77, 3.82, 3.5, \n3.53, 5.93, 2.72, 2.73, 4.49, 2.43, 5.38, 4.89, 2.42, 3.86, 2.21, \n0.52, 2.61, 3.11, 2.6, 5.24, 2.07, 2.12, 4.55, 0.958, 2.53, 3.82, \n5.34, 2.02, 2.01, 4.9, 3.56, 2.43, 2.3, 5.18, 3.5, 4.33, 2.63, \n2.71, 3.23, 3.53, 5.23, 2.02, 2.63, 3.35, 2.88, 3.34, 4.61, 2.9, \n2.3, 2.91, 2.42, 2.97, 1.79, 2.07, 4.76, 4.03, 4.27, 3.06, 3.14, \n2.28, 2.33, 2.38, 3.02, 3.17, 3.59, 5.76, 2.48, 3.7, 2.56, 3.74, \n2.6, 6.39, 1.96, 3.9, 4.02, 1.28, 3, 4.81, 3.21, 4.47, 3.88, \n1.73, 3.18, 2.07, 3.66, 2.66, 2.96, 1.87, 4.11, 4.09, 1.4, 4.65, \n4.24, 4.05, 3.9, 2, 1.9, 3.46, 0.831, 1.89, 3.66, 2.58))\n...Predicting: start of batch 3; got logs: list()\n...Predicting: end of batch 3; got logs: list(outputs = c(5.03, 1.49, 2.96, 2.33, 1.71, 5.39, 4.6, 4.23, \n3.8, 2.3, 2.95, 2.96, 4.26, 1.66, 3.16, 3.24, 3.01, 2.74, 2.6, \n3.49, 2.91, 5.34, 4.7, 3.11, 2.95, 2.72, 3.74, 3.39, 6.3, 5.65, \n3.43, 4.18, 2.73, 4.71, 3.26, 1.73, 2.44, 1.8, 4.36, 4.02, 1.03, \n4.07, 3.84, 1.89, 3.88, 4.1, 2.11, 3.48, 2.81, 3.84, 3.85, 4.28, \n3.83, 6, 3.82, 3, 4.54, 2.91, 3.56, 1.66, 3.45, 1.64, 4.28, 5.8, \n4.26, 3.32, 4.95, 5.13, 2.77, 1.45, 4.56, 2.99, 2.04, 2.75, 4.8, \n2.31, 4.18, 4.14, 5.25, 4.42, 4.5, 5.71, 3.7, 3.68, 5.03, 3.73, \n3.2, 3.22, 3.83, 1.2, 5.63, 4.94, 2.59, 2.89, 2.4, 3.15, 1.28, \n4.33, 2.15, 2.08, 3.52, 1.95, 4.88, 4.49, 4.5, 1.72, 1.58, 2.56, \n2.8, 2.91, 4.71, 5.91, 3.7, 3.56, 3.32, 2.14))\nStop predicting; got logs: list()\n```\n:::\n:::\n\n\n### Usage of `logs`\n\nThe `logs` named list contains the loss value, and all the metrics at\nthe end of a batch or epoch. Example includes the loss and mean absolute\nerror.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nLossAndErrorPrintingCallback(keras$callbacks$Callback) %py_class% {\n  on_train_batch_end <- function(batch, logs = NULL)\n    cat(sprintf(\"Up to batch %i, the average loss is %7.2f.\\n\",\n                batch,  logs$loss))\n\n  on_test_batch_end <- function(batch, logs = NULL)\n    cat(sprintf(\"Up to batch %i, the average loss is %7.2f.\\n\",\n                batch, logs$loss))\n\n  on_epoch_end <- function(epoch, logs = NULL)\n    cat(sprintf(\n      \"The average loss for epoch %2i is %9.2f and mean absolute error is %7.2f.\\n\",\n      epoch, logs$loss, logs$mean_absolute_error\n    ))\n}\n\nmodel <- get_model()\nmodel %>% fit(\n  mnist$train$x,\n  mnist$train$y,\n  batch_size = 128,\n  epochs = 2,\n  verbose = 0,\n  callbacks = list(LossAndErrorPrintingCallback())\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUp to batch 0, the average loss is   27.64.\nUp to batch 1, the average loss is  425.30.\nUp to batch 2, the average loss is  291.55.\nUp to batch 3, the average loss is  226.01.\nThe average loss for epoch  0 is    226.01 and mean absolute error is    9.61.\nUp to batch 0, the average loss is    6.48.\nUp to batch 1, the average loss is    6.42.\nUp to batch 2, the average loss is    5.89.\nUp to batch 3, the average loss is    5.88.\nThe average loss for epoch  1 is      5.88 and mean absolute error is    2.00.\n```\n:::\n\n```{.r .cell-code}\nres = model %>% evaluate(\n  mnist$test$x,\n  mnist$test$y,\n  batch_size = 128,\n  verbose = 0,\n  callbacks = list(LossAndErrorPrintingCallback())\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUp to batch 0, the average loss is    5.37.\nUp to batch 1, the average loss is    4.78.\nUp to batch 2, the average loss is    4.71.\nUp to batch 3, the average loss is    4.80.\n```\n:::\n:::\n\n\n## Usage of `self$model` attribute\n\nIn addition to receiving log information when one of their methods is\ncalled, callbacks have access to the model associated with the current\nround of training/evaluation/inference: `self$model`.\n\nHere are of few of the things you can do with `self$model` in a\ncallback:\n\n-   Set `self$model$stop_training <- TRUE` to immediately interrupt\n    training.\n-   Mutate hyperparameters of the optimizer (available as\n    `self$model$optimizer`), such as\n    `self$model$optimizer$learning_rate`.\n-   Save the model at period intervals.\n-   Record the output of `predict(model)` on a few test samples at the\n    end of each epoch, to use as a sanity check during training.\n-   Extract visualizations of intermediate features at the end of each\n    epoch, to monitor what the model is learning over time.\n-   etc.\n\nLet's see this in action in a couple of examples.\n\n## Examples of Keras callback applications\n\n### Early stopping at minimum loss\n\nThis first example shows the creation of a `Callback` that stops\ntraining when the minimum of loss has been reached, by setting the\nattribute `self$model$stop_training` (boolean). Optionally, you can\nprovide an argument `patience` to specify how many epochs we should wait\nbefore stopping after having reached a local minimum.\n\n`keras$callbacks$EarlyStopping` provides a more complete and general\nimplementation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nEarlyStoppingAtMinLoss(keras$callbacks$Callback) %py_class% {\n  \"Stop training when the loss is at its min, i.e. the loss stops decreasing.\n\n  Arguments:\n      patience: Number of epochs to wait after min has been hit. After this\n        number of no improvement, training stops.\n  \"\n\n  initialize <- function(patience = 0) {\n    # call keras$callbacks$Callback$__init__(), so it can setup `self`\n    super$initialize()\n    self$patience <- patience\n    # best_weights to store the weights at which the minimum loss occurs.\n    self$best_weights <- NULL\n  }\n\n  on_train_begin <- function(logs = NULL) {\n    # The number of epoch it has waited when loss is no longer minimum.\n    self$wait <- 0\n    # The epoch the training stops at.\n    self$stopped_epoch <- 0\n    # Initialize the best as infinity.\n    self$best <- Inf\n  }\n\n  on_epoch_end <- function(epoch, logs = NULL) {\n    current <- logs$loss\n    if (current < self$best) {\n      self$best <- current\n      self$wait <- 0\n      # Record the best weights if current results is better (less).\n      self$best_weights <- self$model$get_weights()\n    } else {\n      self$wait %<>% `+`(1)\n      if (self$wait >= self$patience) {\n        self$stopped_epoch <- epoch\n        self$model$stop_training <- TRUE\n        cat(\"Restoring model weights from the end of the best epoch.\\n\")\n        self$model$set_weights(self$best_weights)\n      }\n    }\n  }\n\n  on_train_end <- function(logs = NULL)\n    if (self$stopped_epoch > 0)\n      cat(sprintf(\"Epoch %05d: early stopping\\n\", self$stopped_epoch + 1))\n\n}\n\n\nmodel <- get_model()\nmodel %>% fit(\n  mnist$train$x,\n  mnist$train$y,\n  batch_size = 64,\n  steps_per_epoch = 5,\n  epochs = 30,\n  verbose = 0,\n  callbacks = list(LossAndErrorPrintingCallback(),\n                   EarlyStoppingAtMinLoss())\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUp to batch 0, the average loss is   27.95.\nUp to batch 1, the average loss is  516.37.\nUp to batch 2, the average loss is  352.82.\nUp to batch 3, the average loss is  266.31.\nUp to batch 4, the average loss is  214.07.\nThe average loss for epoch  0 is    214.07 and mean absolute error is    8.43.\nUp to batch 0, the average loss is    7.93.\nUp to batch 1, the average loss is    7.23.\nUp to batch 2, the average loss is    7.00.\nUp to batch 3, the average loss is    6.57.\nUp to batch 4, the average loss is    6.06.\nThe average loss for epoch  1 is      6.06 and mean absolute error is    2.05.\nUp to batch 0, the average loss is    5.44.\nUp to batch 1, the average loss is    4.97.\nUp to batch 2, the average loss is    4.84.\nUp to batch 3, the average loss is    4.47.\nUp to batch 4, the average loss is    4.41.\nThe average loss for epoch  2 is      4.41 and mean absolute error is    1.69.\nUp to batch 0, the average loss is    5.61.\nUp to batch 1, the average loss is    6.26.\nUp to batch 2, the average loss is    6.78.\nUp to batch 3, the average loss is    7.74.\nUp to batch 4, the average loss is    8.84.\nThe average loss for epoch  3 is      8.84 and mean absolute error is    2.49.\nRestoring model weights from the end of the best epoch.\nEpoch 00004: early stopping\n```\n:::\n:::\n\n\n### Learning rate scheduling\n\nIn this example, we show how a custom Callback can be used to\ndynamically change the learning rate of the optimizer during the course\nof training.\n\nSee `keras$callbacks$LearningRateScheduler` for a more general\nimplementations (in RStudio, press F1 while the cursor is over\n`LearningRateScheduler` and a browser will open to [this\npage](https://www.tensorflow.org/versions/r2.5/api_docs/python/tf/keras/callbacks/LearningRateScheduler)).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCustomLearningRateScheduler(keras$callbacks$Callback) %py_class% {\n  \"Learning rate scheduler which sets the learning rate according to schedule.\n\n  Arguments:\n      schedule: a function that takes an epoch index\n          (integer, indexed from 0) and current learning rate\n          as inputs and returns a new learning rate as output (float).\n  \"\n\n  `__init__` <- function(schedule) {\n    super()$`__init__`()\n    self$schedule <- schedule\n  }\n\n  on_epoch_begin <- function(epoch, logs = NULL) {\n    ## When in doubt about what types of objects are in scope (e.g., self$model)\n    ## use a debugger to interact with the actual objects at the console!\n    # browser()\n\n    if (!\"learning_rate\" %in% names(self$model$optimizer))\n      stop('Optimizer must have a \"learning_rate\" attribute.')\n\n    # # Get the current learning rate from model's optimizer.\n    # use as.numeric() to convert the tf.Variable to an R numeric\n    lr <- as.numeric(self$model$optimizer$learning_rate)\n    # # Call schedule function to get the scheduled learning rate.\n    scheduled_lr <- self$schedule(epoch, lr)\n    # # Set the value back to the optimizer before this epoch starts\n    self$model$optimizer$learning_rate <- scheduled_lr\n    cat(sprintf(\"\\nEpoch %05d: Learning rate is %6.4f.\\n\", epoch, scheduled_lr))\n  }\n}\n\n\nLR_SCHEDULE <- tibble::tribble(~ start_epoch, ~ learning_rate,\n                                           0,           0.1  ,\n                                           3,           0.05 ,\n                                           6,           0.01 ,\n                                           9,           0.005,\n                                          12,           0.001)\n\n\nlr_schedule <- function(epoch, learning_rate) {\n  \"Helper function to retrieve the scheduled learning rate based on epoch.\"\n  if (epoch <= last(LR_SCHEDULE$start_epoch))\n    with(LR_SCHEDULE, learning_rate[which.min(epoch > start_epoch)])\n  else\n    learning_rate\n}\n\n\nmodel <- get_model()\nmodel %>% fit(\n  mnist$train$x,\n  mnist$train$y,\n  batch_size = 64,\n  steps_per_epoch = 5,\n  epochs = 15,\n  verbose = 0,\n  callbacks = list(\n    LossAndErrorPrintingCallback(),\n    CustomLearningRateScheduler(lr_schedule)\n  )\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nEpoch 00000: Learning rate is 0.1000.\nUp to batch 0, the average loss is   24.61.\nUp to batch 1, the average loss is  380.05.\nUp to batch 2, the average loss is  261.02.\nUp to batch 3, the average loss is  199.01.\nUp to batch 4, the average loss is  160.59.\nThe average loss for epoch  0 is    160.59 and mean absolute error is    7.77.\n\nEpoch 00001: Learning rate is 0.0500.\nUp to batch 0, the average loss is    5.31.\nUp to batch 1, the average loss is    5.03.\nUp to batch 2, the average loss is    5.19.\nUp to batch 3, the average loss is    5.24.\nUp to batch 4, the average loss is    5.07.\nThe average loss for epoch  1 is      5.07 and mean absolute error is    1.88.\n\nEpoch 00002: Learning rate is 0.0500.\nUp to batch 0, the average loss is    4.79.\nUp to batch 1, the average loss is    4.51.\nUp to batch 2, the average loss is    4.30.\nUp to batch 3, the average loss is    4.37.\nUp to batch 4, the average loss is    4.44.\nThe average loss for epoch  2 is      4.44 and mean absolute error is    1.69.\n\nEpoch 00003: Learning rate is 0.0500.\nUp to batch 0, the average loss is    4.66.\nUp to batch 1, the average loss is    4.12.\nUp to batch 2, the average loss is    3.99.\nUp to batch 3, the average loss is    4.16.\nUp to batch 4, the average loss is    4.36.\nThe average loss for epoch  3 is      4.36 and mean absolute error is    1.70.\n\nEpoch 00004: Learning rate is 0.0100.\nUp to batch 0, the average loss is    4.32.\nUp to batch 1, the average loss is    4.12.\nUp to batch 2, the average loss is    3.60.\nUp to batch 3, the average loss is    3.41.\nUp to batch 4, the average loss is    3.27.\nThe average loss for epoch  4 is      3.27 and mean absolute error is    1.48.\n\nEpoch 00005: Learning rate is 0.0100.\nUp to batch 0, the average loss is    3.74.\nUp to batch 1, the average loss is    3.19.\nUp to batch 2, the average loss is    3.21.\nUp to batch 3, the average loss is    3.49.\nUp to batch 4, the average loss is    3.46.\nThe average loss for epoch  5 is      3.46 and mean absolute error is    1.53.\n\nEpoch 00006: Learning rate is 0.0100.\nUp to batch 0, the average loss is    2.32.\nUp to batch 1, the average loss is    3.63.\nUp to batch 2, the average loss is    3.38.\nUp to batch 3, the average loss is    3.38.\nUp to batch 4, the average loss is    3.39.\nThe average loss for epoch  6 is      3.39 and mean absolute error is    1.46.\n\nEpoch 00007: Learning rate is 0.0050.\nUp to batch 0, the average loss is    3.59.\nUp to batch 1, the average loss is    3.19.\nUp to batch 2, the average loss is    3.32.\nUp to batch 3, the average loss is    3.30.\nUp to batch 4, the average loss is    3.26.\nThe average loss for epoch  7 is      3.26 and mean absolute error is    1.44.\n\nEpoch 00008: Learning rate is 0.0050.\nUp to batch 0, the average loss is    3.11.\nUp to batch 1, the average loss is    3.13.\nUp to batch 2, the average loss is    3.14.\nUp to batch 3, the average loss is    3.12.\nUp to batch 4, the average loss is    3.19.\nThe average loss for epoch  8 is      3.19 and mean absolute error is    1.42.\n\nEpoch 00009: Learning rate is 0.0050.\nUp to batch 0, the average loss is    3.27.\nUp to batch 1, the average loss is    3.13.\nUp to batch 2, the average loss is    3.09.\nUp to batch 3, the average loss is    3.02.\nUp to batch 4, the average loss is    3.02.\nThe average loss for epoch  9 is      3.02 and mean absolute error is    1.41.\n\nEpoch 00010: Learning rate is 0.0010.\nUp to batch 0, the average loss is    2.80.\nUp to batch 1, the average loss is    2.99.\nUp to batch 2, the average loss is    3.15.\nUp to batch 3, the average loss is    3.25.\nUp to batch 4, the average loss is    3.20.\nThe average loss for epoch 10 is      3.20 and mean absolute error is    1.41.\n\nEpoch 00011: Learning rate is 0.0010.\nUp to batch 0, the average loss is    2.45.\nUp to batch 1, the average loss is    2.91.\nUp to batch 2, the average loss is    2.73.\nUp to batch 3, the average loss is    2.89.\nUp to batch 4, the average loss is    2.97.\nThe average loss for epoch 11 is      2.97 and mean absolute error is    1.40.\n\nEpoch 00012: Learning rate is 0.0010.\nUp to batch 0, the average loss is    2.29.\nUp to batch 1, the average loss is    2.17.\nUp to batch 2, the average loss is    2.80.\nUp to batch 3, the average loss is    2.93.\nUp to batch 4, the average loss is    2.93.\nThe average loss for epoch 12 is      2.93 and mean absolute error is    1.34.\n\nEpoch 00013: Learning rate is 0.0010.\nUp to batch 0, the average loss is    3.36.\nUp to batch 1, the average loss is    3.03.\nUp to batch 2, the average loss is    3.18.\nUp to batch 3, the average loss is    3.09.\nUp to batch 4, the average loss is    2.87.\nThe average loss for epoch 13 is      2.87 and mean absolute error is    1.35.\n\nEpoch 00014: Learning rate is 0.0010.\nUp to batch 0, the average loss is    4.15.\nUp to batch 1, the average loss is    3.32.\nUp to batch 2, the average loss is    2.85.\nUp to batch 3, the average loss is    2.68.\nUp to batch 4, the average loss is    2.83.\nThe average loss for epoch 14 is      2.83 and mean absolute error is    1.32.\n```\n:::\n:::\n\n\n### Built-in Keras callbacks\n\nBe sure to check out the existing Keras callbacks by reading the [API\ndocs](https://keras.io/api/callbacks/). Applications include logging to\nCSV, saving the model, visualizing metrics in TensorBoard, and a lot\nmore!\n\n---\nformat: html\n---\n\n## Environment Details\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### Tensorflow Version\n\n::: {.cell}\n\n```{.r .cell-code}\ntensorflow::tf_config()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTensorFlow v2.11.0 (~/.virtualenvs/r-tensorflow-website/lib/python3.10/site-packages/tensorflow)\nPython v3.10 (~/.virtualenvs/r-tensorflow-website/bin/python)\n```\n:::\n:::\n:::\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### R Environment Information\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.2.1 (2022-06-23)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Ubuntu 20.04.5 LTS\n\nMatrix products: default\nBLAS:   /home/tomasz/opt/R-4.2.1/lib/R/lib/libRblas.so\nLAPACK: /usr/lib/x86_64-linux-gnu/libmkl_intel_lp64.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] keras_2.9.0.9000      tensorflow_2.9.0.9000\n\nloaded via a namespace (and not attached):\n [1] Rcpp_1.0.9           pillar_1.8.1         compiler_4.2.1      \n [4] envir_0.2.2          base64enc_0.1-3      tools_4.2.1         \n [7] zeallot_0.1.0        digest_0.6.31        jsonlite_1.8.4      \n[10] evaluate_0.18        lifecycle_1.0.3      tibble_3.1.8        \n[13] lattice_0.20-45      pkgconfig_2.0.3      png_0.1-8           \n[16] rlang_1.0.6          Matrix_1.5-3         DBI_1.1.3           \n[19] cli_3.4.1            yaml_2.3.6           xfun_0.35           \n[22] fastmap_1.1.0        dplyr_1.0.10         stringr_1.5.0       \n[25] knitr_1.41           generics_0.1.3       vctrs_0.5.1         \n[28] htmlwidgets_1.5.4    rprojroot_2.0.3      tidyselect_1.2.0    \n[31] grid_4.2.1           here_1.0.1           reticulate_1.26-9000\n[34] glue_1.6.2           R6_2.5.1             fansi_1.0.3         \n[37] rmarkdown_2.18       magrittr_2.0.3       whisker_0.4.1       \n[40] htmltools_0.5.4      tfruns_1.5.1         assertthat_0.2.1    \n[43] utf8_1.2.2           stringi_1.7.8       \n```\n:::\n:::\n:::\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### Python Environment Information\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem2(reticulate::py_exe(), c(\"-m pip freeze\"), stdout = TRUE) |> writeLines()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nabsl-py==1.3.0\nasttokens==2.2.1\nastunparse==1.6.3\nbackcall==0.2.0\ncachetools==5.2.0\ncertifi==2022.12.7\ncharset-normalizer==2.1.1\ndecorator==5.1.1\ndill==0.3.6\netils==0.9.0\nexecuting==1.2.0\nflatbuffers==22.12.6\ngast==0.4.0\ngoogle-auth==2.15.0\ngoogle-auth-oauthlib==0.4.6\ngoogle-pasta==0.2.0\ngoogleapis-common-protos==1.57.0\ngrpcio==1.51.1\nh5py==3.7.0\nidna==3.4\nimportlib-resources==5.10.1\nipython==8.7.0\njedi==0.18.2\nkaggle==1.5.12\nkeras==2.11.0\nkeras-tuner==1.1.3\nkt-legacy==1.0.4\nlibclang==14.0.6\nMarkdown==3.4.1\nMarkupSafe==2.1.1\nmatplotlib-inline==0.1.6\nnumpy==1.23.5\noauthlib==3.2.2\nopt-einsum==3.3.0\npackaging==22.0\npandas==1.5.2\nparso==0.8.3\npexpect==4.8.0\npickleshare==0.7.5\nPillow==9.3.0\npromise==2.3\nprompt-toolkit==3.0.36\nprotobuf==3.19.6\nptyprocess==0.7.0\npure-eval==0.2.2\npyasn1==0.4.8\npyasn1-modules==0.2.8\npydot==1.4.2\nPygments==2.13.0\npyparsing==3.0.9\npython-dateutil==2.8.2\npython-slugify==7.0.0\npytz==2022.6\nPyYAML==6.0\nrequests==2.28.1\nrequests-oauthlib==1.3.1\nrsa==4.9\nscipy==1.9.3\nsix==1.16.0\nstack-data==0.6.2\ntensorboard==2.11.0\ntensorboard-data-server==0.6.1\ntensorboard-plugin-wit==1.8.1\ntensorflow==2.11.0\ntensorflow-datasets==4.7.0\ntensorflow-estimator==2.11.0\ntensorflow-hub==0.12.0\ntensorflow-io-gcs-filesystem==0.28.0\ntensorflow-metadata==1.12.0\ntermcolor==2.1.1\ntext-unidecode==1.3\ntoml==0.10.2\ntqdm==4.64.1\ntraitlets==5.7.1\ntyping_extensions==4.4.0\nurllib3==1.26.13\nwcwidth==0.2.5\nWerkzeug==2.2.2\nwrapt==1.14.1\nzipp==3.11.0\n```\n:::\n:::\n:::\n\n::: {.callout-note appearance=\"simple\" collapse=\"true\"}\n### Additional Information\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nTF Devices:\n-  PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU') \n-  PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU') \nCPU cores: 12 \nDate rendered: 2022-12-16 \nPage render time: 10 seconds\n```\n:::\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}